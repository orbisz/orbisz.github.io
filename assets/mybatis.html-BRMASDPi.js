import{_ as a,c as t,a as s,o as d}from"./app-CwN1xCkZ.js";const c={};function o(i,e){return d(),t("div",null,e[0]||(e[0]=[s('<p>MyBatis 是一款<strong>半自动化的 ORM（对象关系映射）框架</strong>，由 Apache 开源（原名 iBatis）。它的核心作用是<strong>将 SQL 语句与Java代码解耦</strong>，允许开发者通过 XML 或注解方式编写 SQL，同时将查询结果映射为 Java 对象。 基于JDBC进行封装，是 Java 官方提供的数据库访问标准 API，直接与数据库交互。开发人员需手动编写 SQL 语句、创建连接、处理结果集等，代码繁琐（如<code>Statement</code>、<code>ResultSet</code>操作）。 <strong>核心特点</strong></p><ul><li><strong>灵活性</strong>：不强制封装 SQL，开发者可自由编写复杂 SQL（如多表关联、存储过程）。</li><li><strong>轻量级</strong>：无需完整的框架依赖，仅通过配置文件或注解即可快速集成。</li><li><strong>性能优化</strong>：支持 SQL 缓存、延迟加载、动态 SQL 等性能优化机制。</li></ul><h3 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别"><span><code>#{}</code>和<code>${}</code>的区别</span></a></h3><p><strong><code>${}</code>是在<code>Properties</code>文件中使用的变量占位符</strong>，在 MyBatis 执行 SQL 语句之前，会将<code>${}</code>中的内容直接替换成对应的值，属于原样替换。无论<code>${}</code>内的内容是什么，都会被原封不动地拼接到 SQL 语句中。 比如根据参数按任意字段排序的需求：</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">   select * from users order by ${orderCols}</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>orderCols</code>参数可以传入<code>name</code>、<code>name desc</code>、<code>name</code>,<code>sex asc</code>等不同的值，实现灵活的排序效果。</p><p><strong><code>#{}</code>是SQL参数占位符</strong>。MyBatis会将SQL语句中的<code>#{}</code>替换为?，在执行SQL语句时，通过<code>PreparedStatement</code>的参数设置方法，按照顺序为?占位符设置具体的参数值。这种方式能够有效避免 SQL 注入问题，因为参数值是通过预编译的方式设置的，而不是直接拼接在 SQL 语句中。 比如<code>ps.setInt(0, parameterValue)</code>，<code>#{item.name}</code>的取值方式为使用反射从参数对象中获取<code>item</code>对象的<code>name</code>属性值，相当于<code>param.getItem().getName()</code>。</p><h3 id="xml-映射文件中-除了常见的select、insert、update、delete标签之外-还有哪些标签" tabindex="-1"><a class="header-anchor" href="#xml-映射文件中-除了常见的select、insert、update、delete标签之外-还有哪些标签"><span>xml 映射文件中，除了常见的<code>select</code>、<code>insert</code>、<code>update</code>、<code>delete</code>标签之外，还有哪些标签？</span></a></h3><p><strong>动态SQL标签</strong>：<code>&lt;where&gt;</code>,<code>if</code>,<code>foreach</code>,<code>set</code>,<code>choose</code>,<code>when</code>,<code>otherwise</code>,<code>trim</code>.</p><p><strong>结果映射标签</strong>: <code>resultMap</code>,<code>constructor</code>.</p><p><strong>SQL片段与引用标签</strong>：<code>sql</code>,<code>include</code>.</p><p><strong>其他标签</strong>：<code>bind</code>,<code>selectKey</code>(为不支持自增的主键生成策略标签)等。</p><h3 id="dao接口的工作原理是什么-dao接口里的方法-参数不同时-方法能重载吗" tabindex="-1"><a class="header-anchor" href="#dao接口的工作原理是什么-dao接口里的方法-参数不同时-方法能重载吗"><span>Dao接口的工作原理是什么，Dao接口里的方法，参数不同时，方法能重载吗？</span></a></h3><p>Dao接口就是Mapper接口，接口的全限名，就是映射文件的<code>namespace</code>的值。接口的方法名就是映射文件中<code>MappedStatement</code>的id值，接口的参数就是传递给sql的参数。</p><p>Dao接口的工作原理是JDK动态代理，MyBatis运行时会使用JDK动态代理为Dao接口生成<code>poxy</code>对象，代理对象<code>poxy</code>会拦截接口方法，转而执行<code>MappedStatement</code>所代表的sql，将sql执行结果返回。</p><p>Dao接口可以有多个重载方法，但是多个接口对应的映射必须只有一个。Dao接口里的方法可以重载，但是MyBatis的xml里面的ID必须唯一。</p><p>Dao方法可以重载，必须满足：</p><ul><li>仅有一个无参方法和一个有参方法</li><li>多个有参方法时，参数数量必须一致。且使用相同的<code>@param</code>，或者使用<code>@param1</code>这种。</li></ul><h3 id="mybatis如何进行分页-分页插件的原理" tabindex="-1"><a class="header-anchor" href="#mybatis如何进行分页-分页插件的原理"><span>MyBatis如何进行分页，分页插件的原理</span></a></h3><ul><li>MyBatis通过RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。</li><li>在sql内直接书写带有物理分页的参数来实现物理分页功能</li><li>使用分页插件进行物理分页。分页插件的实现原理是使用MyBatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</li></ul><h3 id="简述-mybatis-的插件运行原理-以及如何编写一个插件" tabindex="-1"><a class="header-anchor" href="#简述-mybatis-的插件运行原理-以及如何编写一个插件"><span>简述 MyBatis 的插件运行原理，以及如何编写一个插件</span></a></h3><p>MyBatis仅可以编写针对<code>ParameterHandler</code>、<code>ResultSetHandler</code>、<code>StatementHandler</code>、<code>Executor</code>这四种接口的插件， MyBatis使用JDK的动态代理，为需要拦截的接口生成代理对象以及实现接口方法的拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是<code>InvocationHandler</code>的<code>invoke()</code>方法，当然，只需要拦截那些指定的方法。</p><p>实现MyBatis的<code>Interceptor</code>接口并复写<code>intercept()</code>方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可</p><h3 id="mybatis动态sql是做什么的" tabindex="-1"><a class="header-anchor" href="#mybatis动态sql是做什么的"><span>MyBatis动态sql是做什么的</span></a></h3><p>MyBatis的动态sql可以让我们在xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能。其执行原理通过使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。</p><h3 id="mybatis如何将sql执行结果封装为目标对象并返回-有那些映射方式" tabindex="-1"><a class="header-anchor" href="#mybatis如何将sql执行结果封装为目标对象并返回-有那些映射方式"><span>MyBatis如何将sql执行结果封装为目标对象并返回？有那些映射方式</span></a></h3><p>第一种使用<code>resultMap</code>标签，逐一定义列与对象属性名之间的映射关系。第二种使用sql列的别名功能，将列的别名书写为对象属性名。</p><p>有了列名和对象属性名的映射关系后，MyBatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回。</p><h3 id="mybatis-能执行一对一、一对多的关联查询吗-都有哪些实现方式-以及它们之间的区别" tabindex="-1"><a class="header-anchor" href="#mybatis-能执行一对一、一对多的关联查询吗-都有哪些实现方式-以及它们之间的区别"><span>MyBatis 能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别</span></a></h3><p>MyBatis 不仅可以执行一对一、一对多的关联查询，还可以执行多对一，多对多的关联查询，多对一查询，其实就是一对一查询，只需要把<code>selectOne()</code>修改为<code>selectList()</code>即可；多对多查询，其实就是一对多查询，只需要把<code>selectOne()</code>修改为<code>selectList()</code>即可。</p><p>关联对象查询有两种方式</p><ul><li>单独发送一个sql去查询关联对象，赋给主对象，返回主对象。</li><li>使用嵌套查询，即使用join查询，一部分列是对象A的属性值，另一部分列是关联对象B的属性值。</li></ul><p>主对象和关联对象的去重通过<code>&lt;resultMap&gt;</code>标签内的<code>&lt;id&gt;</code>子标签，指定了唯一确定一条记录的id列，MyBatis根据<code>&lt;id&gt;</code>列值来完成 100 条记录的去重复功能，<code>&lt;id&gt;</code>可以有多个，代表了联合主键的语意。</p><h3 id="mybatis是否支持延迟加载-如果支持-它的实现原理是什么" tabindex="-1"><a class="header-anchor" href="#mybatis是否支持延迟加载-如果支持-它的实现原理是什么"><span>MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？</span></a></h3><p>MyBatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询，在MyBatis配置文件中，可以配置是否启用延迟加载<code>lazyLoadingEnabled=true|false</code>..</p><p>实现原理:使用<code>CGLIB</code>创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用<code>a.getB().getName()</code>，拦截器<code>invoke()</code>方法发现<code>a.getB()</code>是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把<code>B</code>查询上来，然后调用<code>a.setB(b)</code>，于是a的对象b属性就有值了，接着完成<code>a.getB().getName()</code>方法的调用。</p><h3 id="mybatis的xml映射文件中-不同的xml映射文件-id是否可以重复" tabindex="-1"><a class="header-anchor" href="#mybatis的xml映射文件中-不同的xml映射文件-id是否可以重复"><span>MyBatis的xml映射文件中，不同的xml映射文件，id是否可以重复？</span></a></h3><p>不同的xml映射文件，如果配置了namespace，那么id是可以重复的；如果没有配置namespace，那么id不能重复； 因为namespace+id是作为<code>Map&lt;String,MappedStatement&gt;</code>的key使用的，如果没有namespace，就剩下id，重复的id就会导致数据被覆盖。有了namespace，id自然可以重复，因为namespace不同，那么key也不同。</p><h3 id="mybatis-都有哪些executor执行器-它们之间的区别是什么-如何指定使用哪一种executor执行器" tabindex="-1"><a class="header-anchor" href="#mybatis-都有哪些executor执行器-它们之间的区别是什么-如何指定使用哪一种executor执行器"><span>MyBatis 都有哪些<code>Executor</code>执行器？它们之间的区别是什么？如何指定使用哪一种Executor执行器？</span></a></h3><p><code>Executor</code>执行器是核心组件之一，负责执行 SQL 语句、管理缓存、处理事务等操作。它是 MyBatis 与 JDBC 交互的桥梁，直接控制 SQL 执行的全过程。</p><p>MyBatis有三种基本的<code>Executor</code>组件，</p><ul><li><code>SimpleExecutor</code>：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</li><li><code>ReuseExecutor</code>：重复使用Statement对象。执行完update或者select后，以sql作为key去查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置在<code>Map&lt;String,Statement&gt;</code>内，供下一次使用</li><li><code>BatchExecutor</code>： 执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（<code>addBatch()</code>），等待统一执行（<code>executeBatch()</code>），它缓存了多个Statement对象，每个Statement对象都是<code>addBatch()</code>完毕后，等待逐一执行<code>executeBatch()</code>批处理。与 JDBC 批处理相同。</li></ul><p>作用范围：<code>Executor</code>的这些特点，都严格限制在SqlSession生命周期范围内。</p><p>在MyBatis配置文件中，可以指定默认的<code>ExecutorType</code>执行器类型，也可以手动给<code>DefaultSqlSessionFactory</code>的创建SqlSession的方法传递<code>ExecutorType</code>类型参数。</p><h3 id="mybatis是否可以映射enum枚举类" tabindex="-1"><a class="header-anchor" href="#mybatis是否可以映射enum枚举类"><span>MyBatis是否可以映射Enum枚举类</span></a></h3><p>MyBatis可以映射枚举类，不单可以映射枚举类，MyBatis可以映射任何对象到表的一列上。映射方式为自定义一个<code>TypeHandler</code>，实现<code>TypeHandler</code>的<code>SetParameter()</code>（完成从javaType至jdbcType的转换，设置sql问号占位符参数）和<code>getResult()</code>（完成从jdbcType至javaType的转换，获取列查询结果）接口方法。</p><h3 id="mybatis映射文件中-如果a标签通过include引用了b标签的内容-请问-b标签能否定义在a标签的后面-还是说必须定义在a标签的前面" tabindex="-1"><a class="header-anchor" href="#mybatis映射文件中-如果a标签通过include引用了b标签的内容-请问-b标签能否定义在a标签的后面-还是说必须定义在a标签的前面"><span>MyBatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？</span></a></h3><p>虽然MyBatis解析xml映射文件是按照顺序解析的，但是，被引用的B标签依然可以定义在任何地方，MyBatis都可以正确识别。因为MyBatis解析A标签，发现A标签引用了B标签，但是B标签尚未解析到，尚不存在，此时，MyBatis会将A标签标记为未解析状态，然后继续解析余下的标签，包含B标签，待所有标签解析完毕，MyBatis会重新解析那些被标记为未解析的标签，此时再解析A标签时，B标签已经存在，A 标签也就可以正常解析完成了。</p><h3 id="简述mybatis的xml映射文件和mybatis内部数据结构之间的映射关系" tabindex="-1"><a class="header-anchor" href="#简述mybatis的xml映射文件和mybatis内部数据结构之间的映射关系"><span>简述MyBatis的xml映射文件和MyBatis内部数据结构之间的映射关系？</span></a></h3><p>MyBatis将所有xml配置信息都封装到All-In-One重量级对象Configuration内部。在xml映射文件中，<code>&lt;parameterMap&gt;</code>标签会被解析为<code>ParameterMap</code>对象，其每个子元素会被解析为ParameterMapping对象。<code>&lt;resultMap&gt;</code>标签会被解析为<code>ResultMap</code>对象，其每个子元素会被解析为<code>ResultMapping</code>对象。每一个<code>&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;</code>标签均会被解析为<code>MappedStatement</code>对象，标签内的sql会被解析为BoundSql对象。</p><h3 id="为什么说mybatis是半自动orm映射工具-它与全自动的区别在哪里" tabindex="-1"><a class="header-anchor" href="#为什么说mybatis是半自动orm映射工具-它与全自动的区别在哪里"><span>为什么说MyBatis是半自动ORM映射工具？它与全自动的区别在哪里？</span></a></h3><p>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而MyBatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。</p><p>参考文章： https://javaguide.cn/system-design/framework/mybatis/mybatis-interview.html</p>',53)]))}const n=a(c,[["render",o]]),r=JSON.parse('{"path":"/blogs/backend/mybatis/mybatis.html","title":"MyBatis学习总结","lang":"en-US","frontmatter":{"title":"MyBatis学习总结","date":"2025/3/28","tags":["框架","Mybatis"],"categories":["后端学习"]},"headers":[{"level":3,"title":"#{}和${}的区别","slug":"和-的区别","link":"#和-的区别","children":[]},{"level":3,"title":"xml 映射文件中，除了常见的select、insert、update、delete标签之外，还有哪些标签？","slug":"xml-映射文件中-除了常见的select、insert、update、delete标签之外-还有哪些标签","link":"#xml-映射文件中-除了常见的select、insert、update、delete标签之外-还有哪些标签","children":[]},{"level":3,"title":"Dao接口的工作原理是什么，Dao接口里的方法，参数不同时，方法能重载吗？","slug":"dao接口的工作原理是什么-dao接口里的方法-参数不同时-方法能重载吗","link":"#dao接口的工作原理是什么-dao接口里的方法-参数不同时-方法能重载吗","children":[]},{"level":3,"title":"MyBatis如何进行分页，分页插件的原理","slug":"mybatis如何进行分页-分页插件的原理","link":"#mybatis如何进行分页-分页插件的原理","children":[]},{"level":3,"title":"简述 MyBatis 的插件运行原理，以及如何编写一个插件","slug":"简述-mybatis-的插件运行原理-以及如何编写一个插件","link":"#简述-mybatis-的插件运行原理-以及如何编写一个插件","children":[]},{"level":3,"title":"MyBatis动态sql是做什么的","slug":"mybatis动态sql是做什么的","link":"#mybatis动态sql是做什么的","children":[]},{"level":3,"title":"MyBatis如何将sql执行结果封装为目标对象并返回？有那些映射方式","slug":"mybatis如何将sql执行结果封装为目标对象并返回-有那些映射方式","link":"#mybatis如何将sql执行结果封装为目标对象并返回-有那些映射方式","children":[]},{"level":3,"title":"MyBatis 能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别","slug":"mybatis-能执行一对一、一对多的关联查询吗-都有哪些实现方式-以及它们之间的区别","link":"#mybatis-能执行一对一、一对多的关联查询吗-都有哪些实现方式-以及它们之间的区别","children":[]},{"level":3,"title":"MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？","slug":"mybatis是否支持延迟加载-如果支持-它的实现原理是什么","link":"#mybatis是否支持延迟加载-如果支持-它的实现原理是什么","children":[]},{"level":3,"title":"MyBatis的xml映射文件中，不同的xml映射文件，id是否可以重复？","slug":"mybatis的xml映射文件中-不同的xml映射文件-id是否可以重复","link":"#mybatis的xml映射文件中-不同的xml映射文件-id是否可以重复","children":[]},{"level":3,"title":"MyBatis 都有哪些Executor执行器？它们之间的区别是什么？如何指定使用哪一种Executor执行器？","slug":"mybatis-都有哪些executor执行器-它们之间的区别是什么-如何指定使用哪一种executor执行器","link":"#mybatis-都有哪些executor执行器-它们之间的区别是什么-如何指定使用哪一种executor执行器","children":[]},{"level":3,"title":"MyBatis是否可以映射Enum枚举类","slug":"mybatis是否可以映射enum枚举类","link":"#mybatis是否可以映射enum枚举类","children":[]},{"level":3,"title":"MyBatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？","slug":"mybatis映射文件中-如果a标签通过include引用了b标签的内容-请问-b标签能否定义在a标签的后面-还是说必须定义在a标签的前面","link":"#mybatis映射文件中-如果a标签通过include引用了b标签的内容-请问-b标签能否定义在a标签的后面-还是说必须定义在a标签的前面","children":[]},{"level":3,"title":"简述MyBatis的xml映射文件和MyBatis内部数据结构之间的映射关系？","slug":"简述mybatis的xml映射文件和mybatis内部数据结构之间的映射关系","link":"#简述mybatis的xml映射文件和mybatis内部数据结构之间的映射关系","children":[]},{"level":3,"title":"为什么说MyBatis是半自动ORM映射工具？它与全自动的区别在哪里？","slug":"为什么说mybatis是半自动orm映射工具-它与全自动的区别在哪里","link":"#为什么说mybatis是半自动orm映射工具-它与全自动的区别在哪里","children":[]}],"git":{"createdTime":1749099634000,"updatedTime":1752592372000,"contributors":[{"name":"zxy","email":"431559981@qq.com","commits":1},{"name":"zxy","email":"zxy0613zxy@outlook.com","commits":1}]},"filePathRelative":"blogs/backend/mybatis/mybatis.md"}');export{n as comp,r as data};
