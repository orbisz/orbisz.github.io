import{_ as p,c as t,b as s,a as e,d as o,e as c,r as l,o as i}from"./app-CwN1xCkZ.js";const u={},k={href:"https://leetcode.cn/problems/n-queens/?envType=study-plan-v2&envId=top-100-liked",target:"_blank",rel:"noopener noreferrer"};function r(d,n){const a=l("ExternalLinkIcon");return i(),t("div",null,[n[1]||(n[1]=s("h2",{id:"题目",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#题目"},[s("span",null,"题目")])],-1)),s("p",null,[s("a",k,[n[0]||(n[0]=o("LeetCode 51.N皇后")),c(a)])]),n[2]||(n[2]=e(`<p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p>n 皇后问题 研究的是如何将 n 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 <code>&#39;Q&#39;</code> 和 <code>&#39;.&#39;</code> 分别代表了皇后和空位。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h2><p><strong>本质</strong> 我们要找出所有将 n 个皇后放在 n×n 棋盘上的方式，使得没有任何两个皇后互相攻击。即：</p><ul><li>每行只能有一个皇后</li><li>每列只能有一个皇后</li><li>每条斜线（45° 和 135°）只能有一个皇后</li></ul><p><strong>核心逻辑</strong></p><ul><li>从第一行开始，尝试在每一列放置皇后；</li><li>判断当前位置是否安全（即不在同一列、主对角线、副对角线上）；</li><li>如果安全，则继续在下一行递归放皇后；</li><li>如果放完了所有 n 个皇后，说明找到一个解，保存它；</li><li>回溯，撤销上一个放置，尝试别的列；</li><li>重复以上步骤直到遍历所有可能性。</li></ul><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NQueens</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化棋盘为全 &#39;.&#39;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 用来标记列、主对角线、副对角线是否被占用</span></span>
<span class="line">    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cols <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diag1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 主对角线 (row - col + n)</span></span>
<span class="line">    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diag2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 副对角线 (row + col)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> board<span class="token punctuation">,</span> results<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> diag1<span class="token punctuation">,</span> diag2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> results<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> results<span class="token punctuation">,</span></span>
<span class="line">                         <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cols<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diag1<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diag2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> n <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 当前是一种有效解，转换成字符串保存</span></span>
<span class="line">      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> r <span class="token operator">:</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        solution<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 计算主对角线和副对角线索引</span></span>
<span class="line">      <span class="token keyword">int</span> d1 <span class="token operator">=</span> row <span class="token operator">-</span> col <span class="token operator">+</span> n<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">int</span> d2 <span class="token operator">=</span> row <span class="token operator">+</span> col<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 如果该位置不安全，跳过</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>cols<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">||</span> diag1<span class="token punctuation">[</span>d1<span class="token punctuation">]</span> <span class="token operator">||</span> diag2<span class="token punctuation">[</span>d2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 放置皇后并标记</span></span>
<span class="line">      board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;Q&#39;</span><span class="token punctuation">;</span></span>
<span class="line">      cols<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> diag1<span class="token punctuation">[</span>d1<span class="token punctuation">]</span> <span class="token operator">=</span> diag2<span class="token punctuation">[</span>d2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 递归处理下一行</span></span>
<span class="line">      <span class="token function">backtrack</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1.</span>md<span class="token punctuation">,</span> board<span class="token punctuation">,</span> results<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> diag1<span class="token punctuation">,</span> diag2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 回溯，撤销放置</span></span>
<span class="line">      board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">;</span></span>
<span class="line">      cols<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> diag1<span class="token punctuation">[</span>d1<span class="token punctuation">]</span> <span class="token operator">=</span> diag2<span class="token punctuation">[</span>d2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="回溯算法" tabindex="-1"><a class="header-anchor" href="#回溯算法"><span>回溯算法</span></a></h2><p><strong>核心逻辑</strong></p><p>回溯法是一种系统地搜索所有可能解的算法，通过递归方式尝试所有可能性，如果当前选择不符合要求，就回退（回溯）到上一步，换个路径继续尝试。</p><p><strong>本质思想</strong></p><p>“尝试 + 判断（选择+剪枝） + 回退 + 继续尝试其他路径”</p><p><strong>一般流程</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>状态参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>到达终止条件<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        保存结果<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>可选的选择 <span class="token operator">:</span> 所有选择集合<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>当前选择不合法<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        做选择<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">backtrack</span><span class="token punctuation">(</span>更新后的状态参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        撤销选择<span class="token punctuation">(</span>回溯<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18))])}const m=p(u,[["render",r]]),b=JSON.parse('{"path":"/blogs/algorithm/3.html","title":"回溯法","lang":"en-US","frontmatter":{"title":"回溯法","date":"2024/04/18","tags":["Java"],"categories":["算法"]},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"回溯算法","slug":"回溯算法","link":"#回溯算法","children":[]}],"git":{"createdTime":1749099634000,"updatedTime":1751505378000,"contributors":[{"name":"zxy","email":"zxy0613zxy@outlook.com","commits":2}]},"filePathRelative":"blogs/algorithm/3.md"}');export{m as comp,b as data};
