import{_ as l,c as i,b as n,a as t,d as a,e as p,r as c,o}from"./app-CwN1xCkZ.js";const r={},d={href:"https://blog.csdn.net/inthat/article/details/109406553?ops_request_misc=%257B%2522request%255Fid%2522%253A%25229e752a8031a03ea0c7ac9467fc23f940%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=9e752a8031a03ea0c7ac9467fc23f940&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-109406553-null-null.142%5Ev102%5Epc_search_result_base5&utm_term=githubssh%E7%A7%81%E9%92%A5%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187",target:"_blank",rel:"noopener noreferrer"};function u(m,s){const e=c("ExternalLinkIcon");return o(),i("div",null,[s[2]||(s[2]=n("p",null,"使用github pages部署vuepress搭建的博客比较方便，并且它是免费的。缺点就是域名不美观，带有github.io的后缀。如果嫌弃域名不好看的可以考虑租用云服务器和域名，将博客部署到云服务器上。",-1)),s[3]||(s[3]=n("h3",{id:"新建仓库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#新建仓库"},[n("span",null,"新建仓库")])],-1)),s[4]||(s[4]=n("p",null,[a("在自己的github账号上新建一个仓库，注意仓库的名称一定要是："),n("strong",null,"用户名.github.io"),a("。")],-1)),n("p",null,[s[1]||(s[1]=a("注意github仓库的SSH密钥一定要配置，因为后面会用到配置了SSH密钥的仓库链接。并且使用SSH密钥的仓库链接在把本地代码推送到github仓库上时，很少会出现连接不到的问题。 SSH密钥配置可以参考：")),n("a",d,[s[0]||(s[0]=a("github ssh密钥配置")),p(e)])]),s[5]||(s[5]=t(`<h3 id="手动部署" tabindex="-1"><a class="header-anchor" href="#手动部署"><span>手动部署</span></a></h3><p>打开项目设置的 <code>GitHub Pages</code> 模块，将 <code>Source</code> 设置为 <code>gh-pages</code>，这样我们就可以将博客项目放在 <code>master</code> 分支，而部署到 <code>gh-pages</code> 分支。</p><p>在根目录建一个 <code>deploy.sh</code> 文件：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 确保脚本抛出遇到的错误</span></span>
<span class="line"><span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 生成静态文件</span></span>
<span class="line"><span class="token function">npm</span> run docs:build</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 进入生成的文件夹</span></span>
<span class="line"><span class="token builtin class-name">cd</span> docs/.vuepress/dist</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 如果是发布到自定义域名</span></span>
<span class="line"><span class="token comment"># echo &#39;www.example.com&#39; &gt; CNAME</span></span>
<span class="line"></span>
<span class="line"><span class="token function">git</span> init</span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;deploy&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span></span>
<span class="line"><span class="token function">git</span> push <span class="token parameter variable">-f</span> git@github.com:<span class="token operator">&lt;</span>USERNAME<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>USERNAME<span class="token operator">&gt;</span>.github.io.git master</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span>
<span class="line"><span class="token function">git</span> push <span class="token parameter variable">-f</span> git@github.com:<span class="token operator">&lt;</span>USERNAME<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>REPO<span class="token operator">&gt;</span>.git master:gh-pages</span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">cd</span> -</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你用的 <code>MAC</code>，在项目根目录借助 终端 执行 <code>bash deploy.sh</code> 即可；如果你使用的是 WINDOWS，在项目根目录借助 <code>Git Bash</code> 执行 <code>bash deplo.sh</code> 即可。</p><h3 id="windows-创建-sh文件的方法" tabindex="-1"><a class="header-anchor" href="#windows-创建-sh文件的方法"><span>windows 创建.sh文件的方法</span></a></h3><p>使用 Git Bash 的命令行工具来创建bash.sh文件。 步骤： <strong>1.打开 Git Bash 终端</strong> 右键点击根目录所在文件夹，选择 Git Bash Here。 <strong>2.使用 touch 命令创建文件</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">bash</span> <span class="token function">touch</span> deploy.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3.使用编辑器修改文件</strong> 例如，使用内置的 nano 编辑器：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">bash</span> <span class="token function">nano</span> test.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输入内容后，按 Ctrl + X 保存并退出。</p><h3 id="自动部署" tabindex="-1"><a class="header-anchor" href="#自动部署"><span>自动部署</span></a></h3><p><strong>对于自动部署，等后面找到合适简洁的操作再更新</strong></p>`,13))])}const b=l(r,[["render",u]]),v=JSON.parse('{"path":"/blogs/front/2.html","title":"使用github pages部署vuepress搭建的博客","lang":"en-US","frontmatter":{"title":"使用github pages部署vuepress搭建的博客","date":"2024/01/09","tags":["博客"],"categories":["前端开发"]},"headers":[{"level":3,"title":"新建仓库","slug":"新建仓库","link":"#新建仓库","children":[]},{"level":3,"title":"手动部署","slug":"手动部署","link":"#手动部署","children":[]},{"level":3,"title":"windows 创建.sh文件的方法","slug":"windows-创建-sh文件的方法","link":"#windows-创建-sh文件的方法","children":[]},{"level":3,"title":"自动部署","slug":"自动部署","link":"#自动部署","children":[]}],"git":{"createdTime":1749016745000,"updatedTime":1754659489000,"contributors":[{"name":"zxy","email":"zxy0613zxy@outlook.com","commits":1}]},"filePathRelative":"blogs/front/2.md"}');export{b as comp,v as data};
