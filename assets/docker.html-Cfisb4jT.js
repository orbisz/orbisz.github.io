import{_ as s,c as n,a,o as i}from"./app-CwN1xCkZ.js";const l="/assets/img-DFLoZxv4.png",r="/assets/img_1-CvyGXWY9.png",t="/assets/img_2-C1kFNurh.png",d="/assets/img_3-D7JS7gLK.png",c="/assets/img_4-CseGqxW1.png",o="/assets/img_5-DuaCD0aL.png",p="/assets/img_10-DoixEzdd.png",m="/assets/img_6-BOEUNO2e.png",u="/assets/img_7-DZi93xri.png",v="/assets/img_8-Bny1OZuA.png",h="/assets/img_9-BeF4URzr.png",g={};function b(k,e){return i(),n("div",null,e[0]||(e[0]=[a(`<p>首先需要购买云服务器，对于并发数不高的轻量项目，2c2g的云服务器就足够了，推荐京东云或者腾讯云，有新人优惠，一年也就不到40，比较划算。</p><p>京东云：https://www.jdcloud.com/</p><p>腾讯云：https://cloud.tencent.com/</p><p>本文通过配置 docker 镜像打包，构建应用的镜像文件来进行部署。因为需要在云服务器上拉去Docker镜像文件，因此首先要在云服务器安装Docker环境</p><h2 id="docker、portainer环境配置" tabindex="-1"><a class="header-anchor" href="#docker、portainer环境配置"><span>Docker、Portainer环境配置</span></a></h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Mac、Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。总之它加快构建、共享和运行现代应用程序的速度。</p><h3 id="_1-yum-更新到最新版本" tabindex="-1"><a class="header-anchor" href="#_1-yum-更新到最新版本"><span>1.yum 更新到最新版本</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sudo yum update</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Last metadata expiration check: 1:15:10 ago on Sat 27 Nov 2021 04:22:53 PM CST.</span>
<span class="line">Dependencies resolved.</span>
<span class="line">Nothing to do.</span>
<span class="line">Complete!</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：可能会更新失败，那就操作以下指令</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">## 建议备份当前的 yum 源配置，以防万一需要恢复</span>
<span class="line">sudo cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span>
<span class="line"></span>
<span class="line">## 从阿里云下载 CentOS 7 的 yum 源配置文件并替换现有的配置</span>
<span class="line">sudo curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span>
<span class="line"></span>
<span class="line">## 清理旧的缓存并生成新的缓存</span>
<span class="line">sudo yum clean all</span>
<span class="line">sudo yum makecache</span>
<span class="line"></span>
<span class="line">## 再次更新</span>
<span class="line">sudo yum update</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-安装docker所需的依赖包" tabindex="-1"><a class="header-anchor" href="#_2-安装docker所需的依赖包"><span>2.安装Docker所需的依赖包</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[root@lavm-l22n2ze371 ~]# sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span>
<span class="line">Loaded plugins: fastestmirror</span>
<span class="line">Repository base is listed more than once in the configuration</span>
<span class="line">Repository updates is listed more than once in the configuration</span>
<span class="line">Repository extras is listed more than once in the configuration</span>
<span class="line">Repository centosplus is listed more than once in the configuration</span>
<span class="line">Loading mirror speeds from cached hostfile</span>
<span class="line">Package yum-utils-1.1.31-54.el7_8.noarch already installed and latest version</span>
<span class="line">Resolving Dependencies</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到显示 Complete 就代表完成了</p><h3 id="_3-设置docker的yum的源" tabindex="-1"><a class="header-anchor" href="#_3-设置docker的yum的源"><span>3.设置Docker的yum的源</span></a></h3><p>建议使用国内源</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-查看仓库所有docker版本" tabindex="-1"><a class="header-anchor" href="#_4-查看仓库所有docker版本"><span>4.查看仓库所有Docker版本</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">yum list docker-ce --showduplicates | sort -r</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里可以看到你能安装的最新版本</p><h3 id="_5-安装docker" tabindex="-1"><a class="header-anchor" href="#_5-安装docker"><span>5.安装Docker</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sudo yum install -y docker-ce-25.0.5 docker-ce-cli-25.0.5 containerd.io</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_6-安装docker-compose" tabindex="-1"><a class="header-anchor" href="#_6-安装docker-compose"><span>6.安装Docker-Compose</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 指定路径【推荐】</span>
<span class="line">sudo curl -L https://gitee.com/fustack/docker-compose/releases/download/v2.24.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span>
<span class="line"># 设置权限</span>
<span class="line">sudo chmod +x /usr/local/bin/docker-compose</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-启动docker并添加开机自启动" tabindex="-1"><a class="header-anchor" href="#_7-启动docker并添加开机自启动"><span>7.启动Docker并添加开机自启动</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 启动 Docker</span>
<span class="line">sudo systemctl start docker</span>
<span class="line"># 设置开机启动 Docker</span>
<span class="line">systemctl enable docker</span>
<span class="line"># 重启 Docker 命令</span>
<span class="line">sudo systemctl restart docker</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-docker-常用命令" tabindex="-1"><a class="header-anchor" href="#_8-docker-常用命令"><span>8.Docker 常用命令</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[root@CodeGuide ~]# docker --help				#Docker帮助</span>
<span class="line">[root@CodeGuide ~]# docker --version			#查看Docker版本</span>
<span class="line">[root@CodeGuide ~]# docker search &lt;image&gt;		#搜索镜像文件，如：docker search mysql</span>
<span class="line">[root@CodeGuide ~]# docker pull &lt;image&gt;		#拉取镜像文件， 如：docker pull mysql</span>
<span class="line">[root@CodeGuide ~]# docker images				#查看已经拉取下来的所以镜像文件</span>
<span class="line">[root@CodeGuide ~]# docker rmi &lt;image&gt;		#删除指定镜像文件</span>
<span class="line">[root@CodeGuide ~]# docker run --name &lt;name&gt; -p 80:8080 -d &lt;image&gt;		#发布指定镜像文件</span>
<span class="line">[root@CodeGuide ~]# docker ps					#查看正在运行的所有镜像</span>
<span class="line">[root@CodeGuide ~]# docker ps -a				#查看所有发布的镜像</span>
<span class="line">[root@CodeGuide ~]# docker rm &lt;image&gt;			#删除执行已发布的镜像</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-设置国内源" tabindex="-1"><a class="header-anchor" href="#_9-设置国内源"><span>9.设置国内源</span></a></h3><p>1panel 提供了镜像源 https://status.1panel.top/status/docker (opens new window)- 直接进去就可以找到最新的镜像源 阿里云提供了镜像源：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors (opens new window)- 登录后你会获得一个专属的地址。 使用以下命令来设置 Docker 国内源：- 或者你可以通过 vim /etc/docker/daemon.json 进入修改添加 registry-mirrors 内容后重启 Docker</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sudo mkdir -p /etc/docker</span>
<span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;</span>
<span class="line">{</span>
<span class="line">  &quot;registry-mirrors&quot;: [&quot;https://***替换为你的地址***.mirror.aliyuncs.com&quot;]</span>
<span class="line">}</span>
<span class="line">EOF</span>
<span class="line">sudo systemctl daemon-reload</span>
<span class="line">sudo systemctl restart docker</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-拉取最新的-portainer" tabindex="-1"><a class="header-anchor" href="#_10-拉取最新的-portainer"><span>10.拉取最新的 Portainer</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker pull portainer/portainer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_11-安装和启动" tabindex="-1"><a class="header-anchor" href="#_11-安装和启动"><span>11.安装和启动</span></a></h3><p><strong>注意</strong>：如果是阿里云服务器，还需要先执行 docker volume crete portainer_data</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker run -d --restart=always --name portainer -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_12-访问-portainer" tabindex="-1"><a class="header-anchor" href="#_12-访问-portainer"><span>12.访问 Portainer</span></a></h3><ul><li>地址：http://云服务器地址:9000/</li><li>操作：登录后设置你的用户名和密码，并设置本地Docker即可，设置完成后，如下 <img src="`+l+'" alt="img.png"> 记得云服务器开放9000端口 <img src="'+r+'" alt="img_1.png"><img src="'+t+'" alt="img_2.png"></li></ul><h2 id="云服务器部署" tabindex="-1"><a class="header-anchor" href="#云服务器部署"><span>云服务器部署</span></a></h2><p>需要注册 https://hub.docker.com/ 账号，并创建镜像名称和上传你的镜像。Docker hub 的作用相当于媒介，上传到 Docker hub 后，在云服务器端在从 Docker hub 拉取下来镜像部署。这个过程就类似于你在部署一些 Redis、MySQL 环境一样。</p><h3 id="构建镜像" tabindex="-1"><a class="header-anchor" href="#构建镜像"><span>构建镜像</span></a></h3><p>添加Dockerfile、build.sh文件 先执行install打包 <img src="'+d+`" alt="img_3.png"><strong>Dockerfile</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 基础镜像</span>
<span class="line">FROM openjdk:8-jre-slim</span>
<span class="line"></span>
<span class="line"># 作者</span>
<span class="line">MAINTAINER orbisz</span>
<span class="line"></span>
<span class="line"># 配置</span>
<span class="line">ENV PARAMS=&quot;&quot;</span>
<span class="line"></span>
<span class="line"># 时区</span>
<span class="line">ENV TZ=PRC</span>
<span class="line">RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone</span>
<span class="line"></span>
<span class="line"># 添加应用</span>
<span class="line">ADD target/big_market-app.jar /big_market-app.jar</span>
<span class="line"></span>
<span class="line">ENTRYPOINT [&quot;sh&quot;,&quot;-c&quot;,&quot;java -jar $JAVA_OPTS /big_market-app.jar $PARAMS&quot;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里ADD target/big_market-app.jar /big_market-app.jar中的big_market-app.jar一定要和install打包的文件名相同 <img src="`+c+`" alt="img_4.png"><strong>build.sh</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 普通镜像构建，随系统版本构建 amd/arm</span>
<span class="line">docker build --no-cache -t orbiszx/big-market-app:3.2 -f ./Dockerfile .</span>
<span class="line"></span>
<span class="line"># 兼容 amd、arm 构建镜像</span>
<span class="line"># docker buildx build --load --platform liunx/amd64,linux/arm64 -t orbisz/xfg-frame-archetype-app:1.0 -f ./Dockerfile . --push</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这里的orbiszx/big-market-app必须和Docker hub仓库的名字一致才能推送镜像成功。</p><ul><li>你可以修改为自己的镜像名字，如 liergou/big-market-front-app:1.0</li><li>前端执行build.sh 构建时，修改 .env.local 里面的 API_HOST_URL=http://ip:port 修改为你自己的云服务器公网IP。</li></ul><p>Mac电脑可以直接在IDEA执行build.sh,windows电脑则需要到build.sh所在的文件夹右键打开Git Bash <img src="`+o+`" alt="img_5.png"> 执行</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">bash build.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+p+'" alt="img_10.png"></p><h3 id="推送镜像" tabindex="-1"><a class="header-anchor" href="#推送镜像"><span>推送镜像</span></a></h3><p>然后在本地的Docker上就可以看到构建的镜像，接着将镜像推送到Docker Hub上 <img src="'+m+'" alt="img_6.png"><strong>注意</strong>：由于Docker Hub不在国内，因此需要打开VPN才能推送上去，或者可以考虑使用阿里云国内镜像仓库，步骤都是相同的。</p><h3 id="部署环境" tabindex="-1"><a class="header-anchor" href="#部署环境"><span>部署环境</span></a></h3><p><img src="'+u+'" alt="img_7.png"><img src="'+v+'" alt="img_8.png"> 进入到 dev-ops 文件夹 执行脚本；docker-compose -f docker-compose-environment.yml up -d 安装项目的运行环境</p><h3 id="部署项目" tabindex="-1"><a class="header-anchor" href="#部署项目"><span>部署项目</span></a></h3><p><img src="'+h+'" alt="img_9.png"></p><ul><li>进入到 dev-ops 文件夹</li><li>执行脚本；docker-compose -f docker-compose-app.yml up -d 部署项目</li></ul><p>然后访问页面即可: http://117.72.164.204:3000/?userId=zxy&amp;activityId=100301</p>',58)]))}const x=s(g,[["render",b]]),y=JSON.parse('{"path":"/blogs/backend/Docker/docker.html","title":"部署项目到云服务器","lang":"en-US","frontmatter":{"title":"部署项目到云服务器","date":"2025/06/10","tags":["项目部署"],"categories":["后端开发"]},"headers":[{"level":2,"title":"Docker、Portainer环境配置","slug":"docker、portainer环境配置","link":"#docker、portainer环境配置","children":[{"level":3,"title":"1.yum 更新到最新版本","slug":"_1-yum-更新到最新版本","link":"#_1-yum-更新到最新版本","children":[]},{"level":3,"title":"2.安装Docker所需的依赖包","slug":"_2-安装docker所需的依赖包","link":"#_2-安装docker所需的依赖包","children":[]},{"level":3,"title":"3.设置Docker的yum的源","slug":"_3-设置docker的yum的源","link":"#_3-设置docker的yum的源","children":[]},{"level":3,"title":"4.查看仓库所有Docker版本","slug":"_4-查看仓库所有docker版本","link":"#_4-查看仓库所有docker版本","children":[]},{"level":3,"title":"5.安装Docker","slug":"_5-安装docker","link":"#_5-安装docker","children":[]},{"level":3,"title":"6.安装Docker-Compose","slug":"_6-安装docker-compose","link":"#_6-安装docker-compose","children":[]},{"level":3,"title":"7.启动Docker并添加开机自启动","slug":"_7-启动docker并添加开机自启动","link":"#_7-启动docker并添加开机自启动","children":[]},{"level":3,"title":"8.Docker 常用命令","slug":"_8-docker-常用命令","link":"#_8-docker-常用命令","children":[]},{"level":3,"title":"9.设置国内源","slug":"_9-设置国内源","link":"#_9-设置国内源","children":[]},{"level":3,"title":"10.拉取最新的 Portainer","slug":"_10-拉取最新的-portainer","link":"#_10-拉取最新的-portainer","children":[]},{"level":3,"title":"11.安装和启动","slug":"_11-安装和启动","link":"#_11-安装和启动","children":[]},{"level":3,"title":"12.访问 Portainer","slug":"_12-访问-portainer","link":"#_12-访问-portainer","children":[]}]},{"level":2,"title":"云服务器部署","slug":"云服务器部署","link":"#云服务器部署","children":[{"level":3,"title":"构建镜像","slug":"构建镜像","link":"#构建镜像","children":[]},{"level":3,"title":"推送镜像","slug":"推送镜像","link":"#推送镜像","children":[]},{"level":3,"title":"部署环境","slug":"部署环境","link":"#部署环境","children":[]},{"level":3,"title":"部署项目","slug":"部署项目","link":"#部署项目","children":[]}]}],"git":{"createdTime":1754659489000,"updatedTime":1754750100000,"contributors":[{"name":"zxy","email":"zxy0613zxy@outlook.com","commits":2}]},"filePathRelative":"blogs/backend/Docker/docker.md"}');export{x as comp,y as data};
