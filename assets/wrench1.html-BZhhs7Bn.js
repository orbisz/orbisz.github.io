import{_ as s,c as a,a as e,o as t}from"./app-CwN1xCkZ.js";const p="/assets/img-Bxofxr6j.png",l="/assets/img_1-DicD8HIV.png",i="/assets/img_2-qnqUb_8v.png",c={};function o(u,n){return t(),a("div",null,n[0]||(n[0]=[e('<p><img src="'+p+'" alt="img.png"></p><h2 id="dcc动态配置中心" tabindex="-1"><a class="header-anchor" href="#dcc动态配置中心"><span>DCC动态配置中心</span></a></h2><p>核心就是构建一个动态配置中心，它允许应用在不重启的情况下，动态的修改配置项的值。它被封装成⼀个 Spring Boot Starter， 任何 Spring Boot 项⽬都可以⽅便地引⼊并使⽤。可以通过分布式发布/订阅⽅式，动态的调整配置指定注解的属性的值， 不需要每次都查询 Redis来获取，从⽽减少 IO 操作</p><h3 id="流程设计" tabindex="-1"><a class="header-anchor" href="#流程设计"><span>流程设计</span></a></h3><p><img src="'+l+'" alt="img_1.png"></p><ul><li>使⽤spring starter机制，以SPI的⽅式（通过org.springframework.boot.autoconfigure.EnableAutoConfiguration实现的自动装配，其实知识借鉴了SPI的思想-即基于配置文件动态发现和加载扩展类），实现组件入口类的注册。启动时会读取 META INF/spring.factories ⽂件⾥配置的类， 完成类的初始化动作。</li><li>注册配置会链接 Redis当作注册中心，因为Redis具备存储和发布订阅的功能。初始化动态配置中⼼的服务，以及监听订阅消息。</li><li>拦截 Spring 容器实例化的 Bean 对象，找到使⽤了⾃定义注解 @DCCValue 的属性， 拦截动态读取 Redis 中配置属性值（如⽆则⾸次设置值），之后对属性进⾏反射调⽤，设置变更后的属性值。</li><li>操作推送 Redis 发布订阅消息，指定属性key和属性值，则可以被消息回调，变更属性值。</li></ul><h3 id="功能实现" tabindex="-1"><a class="header-anchor" href="#功能实现"><span>功能实现</span></a></h3><h4 id="工程结构" tabindex="-1"><a class="header-anchor" href="#工程结构"><span>工程结构</span></a></h4><p><img src="'+i+`" alt="img_2.png"> config：项目的propeties以及自动装配Bean对象 domain：领域层, 关注扫描DCCValue已经将topic中的值从Redis中读取并注入到程序中某个字段的业务。 listener：订阅Redis发布消息，动态变更配置 META-INF/spring.factories：SPI入口</p><h4 id="关键类" tabindex="-1"><a class="header-anchor" href="#关键类"><span>关键类</span></a></h4><ul><li>@DCCValue:⾃定义注解，⽤它标记需要动态管理的字段。</li><li>DynamicConfigCenterAutoConfig: 注⼊⼊口。实现了 BeanPostProcessor，扫描并处理 DCCValue注解 。是连接 Spring 容器和我们⾃定义逻辑的桥梁。</li><li>DynamicConfigCenterAutoProperties: DCC的properties配置文件, 里面定义了DCC有什么需要配置的内容</li><li>DynamicConfigCenterRegisterAutoProperties: 里面定义了Redis需要配置的内容, 并且给出默认值</li><li>DynamicConfigCenterRegisterAutoConfig: 后勤部长。负责创建和组装所有需要的 Bean， 如 RedissonClient、RTopic 等。</li><li>DynamicConfigCenterAdjustListener: 情报哨兵。负责监听 Redis 的消息，是动态更新的触发点。</li><li>DynamicConfigCenterService: 核⼼类，封装了所有业务逻辑，包括启动时注⼊和运⾏时更新。 <ul><li>解析Bean对象中的DCCValue注解, 并尝试将这个值设置到Redis中并注入到某个field中(如果不是初始化的情况, 也就是Redis中已经存在这个值的时候, 就不用注入), 已经将所有用DCCValue注解标注的bean对象都用map存储起来。</li><li>listener调用的服务, 将更新后的Redis中的值注入到程序对应字段中。</li></ul></li></ul><h4 id="两大核心流程" tabindex="-1"><a class="header-anchor" href="#两大核心流程"><span>两大核心流程</span></a></h4><h5 id="流程一-启动时-配置会自动注入" tabindex="-1"><a class="header-anchor" href="#流程一-启动时-配置会自动注入"><span>流程一：启动时，配置会自动注入</span></a></h5><p>当你启动应⽤时，@DCCValue 注解的字段如何被赋值的流程：</p><ol><li>Spring加载: Spring Boot 通过 spring.factories ⽂件找到并加载 DynamicConfigCenterAutoConfig。</li><li>拦截Bean: DynamicConfigCenterAutoConfig 是⼀个 BeanPostProcessor。它会在每个 Spring Bean 初始化之后，对这个 Bean 进⾏拦截。</li><li>扫描注解: 调⽤ DynamicConfigCenterService 的 proxyObject ⽅法，使⽤反射 (getDeclaredFields) 扫描当前 Bean 中是否包含 @DCCValue 注解的字段。</li><li>获取与设置值: <ul><li>需要解代理(具体的原因在[项目细节]里面有), 因为这里的bean对象可能是代理后的对象。</li><li>从解代理以后的class中扫描有没有字段被@DCCValue修饰</li><li>解析注解 (&quot;key:defaultValue&quot;)，获取配置名 key 和默认值 defaultValue。</li><li>根据 key 去 Redis 查询。如果 Redis 中有值，就⽤ Redis 的值；如果没有，就⽤ defaultValue，并把默认值写⼊ Redis。</li><li>最终通过反射 (field.set(bean, value)) 将值注⼊到字段中。</li></ul></li><li>注册映射 ：配置注入完成后，会将配置key和Bean对象的映射关系存入 dccBeanGroup 中</li><li>热更新阶段 ：当配置发生变更时， adjustAttributeValue 方法会通过配置key在 dccBeanGroup 中找到对应的Bean对象，并更新其字段值.即流程二。</li></ol><h5 id="流程二-运行时-配置动态更新" tabindex="-1"><a class="header-anchor" href="#流程二-运行时-配置动态更新"><span>流程二：运行时，配置动态更新</span></a></h5><p>当线上修改某个配置值时</p><ol><li>发布消息: 外部系统（或其他服务）向 Redis 的⼀个特定 Topic (主题) 发布⼀条消息。这 条消息包含了要修改的配置名和新的值 (例如 new AttributeVO(&quot;downgradeSwitch&quot;, &quot;100&quot;))。</li><li>监听消息: DynamicConfigCenterAdjustListener ⼀直在监听这个 Topic，它接收到消息 后，会⽴即响应。</li><li>调⽤服务: 监听器会调⽤ DynamicConfigCenterService 的 adjustAttributeValue ⽅法更新配置 <ul><li>该方法首先会更新Redis中存储的值</li><li>然后，它会从<code>proxyObject</code>存入的dccBeanGroup中读取出来需要的注入的Bean实例。</li><li>最后，再次通过反射直接修改那个在线的、正在运⾏的 Bean 实例的字段值，从⽽实现动态更新。</li></ul></li></ol><h3 id="项目细节" tabindex="-1"><a class="header-anchor" href="#项目细节"><span>项目细节</span></a></h3><h4 id="类已经被代理了-如果回退到原来的类" tabindex="-1"><a class="header-anchor" href="#类已经被代理了-如果回退到原来的类"><span>类已经被代理了, 如果回退到原来的类?</span></a></h4><p>要回答这个问题就需要回头看到代理是怎么实现的, 我们才能在实现中捕捉到这件事情是不是可行的。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TargetSource</span> <span class="token keyword">extends</span> <span class="token class-name">TargetClassAware</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token annotation punctuation">@Nullable</span></span>
<span class="line">	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">boolean</span> <span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Nullable</span></span>
<span class="line">	<span class="token class-name">Object</span> <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">void</span> <span class="token function">releaseTarget</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring在创建代理<strong>JDK动态代理</strong>的对象的过程中会将目标类的信息保存到AdviseSupport(继承自TargetSource), 通过这个类我们就能获取到原始的类和实例。</p><p>而如果是使用CGLIB动态代理, 因为CGLIB代理是通过继承实现的, 只需要<code>getSuperClass()</code>就能获取到原先的类。</p><h4 id="获取代理类的原始class" tabindex="-1"><a class="header-anchor" href="#获取代理类的原始class"><span>获取代理类的原始class</span></a></h4><p>通过<code>AopUtils.getTargetClass()</code>方法</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token class-name">Object</span> candidate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> <span class="token string">&quot;Candidate object must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">TargetClassAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TargetClassAware</span><span class="token punctuation">)</span> candidate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">isCglibProxy</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span> <span class="token operator">?</span> candidate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> candidate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有使用JDK动态代理被代理的类都是继承了TargetSource的, TargetSource继承TargetClassAware, 所以能通过检查是不是继承自TargetClassAware来识别是不是代理类。</p><p>确定了类是代理类, 通过<code>TargetClassAware</code>中的<code>getTargetClass()</code>方法获取该代理类的原始类。 如果这个result为空, 说明是通过CGLIB动态代理的或者压根就没被代理, 如果是CGLIB代理的返回父类, 反之返回本身的类。</p><h4 id="获取代理对象的原始对象" tabindex="-1"><a class="header-anchor" href="#获取代理对象的原始对象"><span>获取代理对象的原始对象</span></a></h4><p>通过 <code>AopProxyUtils.getSingletonTarget()</code>实现</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getSingletonTarget</span><span class="token punctuation">(</span><span class="token class-name">Object</span> candidate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">Advised</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TargetSource</span> targetSource <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Advised</span><span class="token punctuation">)</span> candidate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetSource <span class="token keyword">instanceof</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SingletonTargetSource</span><span class="token punctuation">)</span> targetSource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Advised继承自TargetAware, SingletonTargetSource是一种特殊的TargetSource, 单例模式的目标对象继承SingletonTargetSource而不是TargetSource。</p><ol><li>先判断candidate是不是代理对象: <code>if (candidate instanceof Advised) </code></li><li>判断是不是单例类型: <code>if (targetSource instanceof SingletonTargetSource) </code></li></ol><p><strong>不同于获取原始类的class, 针对CGLIB和JDK动态代理有不同的处理方式, 对于获取原对象, 只有存储下来原对象, 并在需要的时候返回这一种处理方式</strong></p><h4 id="为什么需要回退代理" tabindex="-1"><a class="header-anchor" href="#为什么需要回退代理"><span>为什么需要回退代理</span></a></h4><p>在注解开发中这是重要的一环，因为在动态代理过程中可能会丢失原对象的注解信息。</p><h5 id="在jdk代理中" tabindex="-1"><a class="header-anchor" href="#在jdk代理中"><span>在JDK代理中</span></a></h5><ul><li>JDK动态代理基于接口实现, 生成的代理类继承自<code>java.lang.reflect.Proxy</code>, 代理对象的实际类型不再是原始类, 是动态生成的代理类。</li><li>JDK代理众所周知只能代理接口中定义的方法, 如果注解是加在实现类上的, 而不是接口上的, 代理对象就无法访问这些注解</li></ul><h5 id="在cglib中" tabindex="-1"><a class="header-anchor" href="#在cglib中"><span>在CGLIB中</span></a></h5><ul><li>CGLib生成的是原始类的子类，虽然会继承父类的注解，但在某些框架处理中仍可能出现问题。</li><li>若原始类的注解没有被@Inherited标注，那么 CGLIB 生成的子类（代理类）不会继承该注解。</li><li>部分框架在处理注解时，会直接获取 “当前对象的实际类型”（即代理类类型）来查找注解，而不是追溯到父类（原始类）。</li></ul><p><strong>所以在注解驱动开发中, 识别类是不是代理类, 并将类回退到原始类是个必要的工作, 防止类因为代理而导致注解丢失</strong></p><h5 id="多层代理问题" tabindex="-1"><a class="header-anchor" href="#多层代理问题"><span>多层代理问题</span></a></h5><p>如果一个类被多层代理, 使用<code>AopUtils.getTargetClass()</code>实际上只能获取到&quot;<strong>上一层</strong>&quot;的Class, 而不是最原始的Class, 这个时候就需要使用<code>AopProxyUtils.ultimateTargetClass()</code>。这也算是项目中的小bug。</p><p>选择Redis作为注册中心，主要是基于Redis的高性能、轻量级特性，以及其提供的发布/订阅机制，这些特性非常适合实现一个轻量级的动态配置中心。 相比其他注册中心解决方案，Redis在这个特定场景下更加简单高效，能够满足配置存储和动态更新的需求。在实际项目可以根据实际情况选择其他的作为注册中心。</p>`,45)]))}const d=s(c,[["render",o]]),k=JSON.parse('{"path":"/blogs/Project/wrench/wrench1.html","title":"通用技术组件-开发日志1-DCC动态配置中心","lang":"en-US","frontmatter":{"title":"通用技术组件-开发日志1-DCC动态配置中心","date":"2025/8/01","tags":["动态配置","组件开发"],"categories":["后端开发"]},"headers":[{"level":2,"title":"DCC动态配置中心","slug":"dcc动态配置中心","link":"#dcc动态配置中心","children":[{"level":3,"title":"流程设计","slug":"流程设计","link":"#流程设计","children":[]},{"level":3,"title":"功能实现","slug":"功能实现","link":"#功能实现","children":[]},{"level":3,"title":"项目细节","slug":"项目细节","link":"#项目细节","children":[]}]}],"git":{"createdTime":1754659489000,"updatedTime":1754750100000,"contributors":[{"name":"zxy","email":"zxy0613zxy@outlook.com","commits":2}]},"filePathRelative":"blogs/Project/wrench/wrench1.md"}');export{d as comp,k as data};
