import{_ as n,c as a,a as e,o as t}from"./app-CwN1xCkZ.js";const l={};function p(d,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="一、mysql是什么" tabindex="-1"><a class="header-anchor" href="#一、mysql是什么"><span>一、MySQL是什么</span></a></h2><ul><li>MySQL 是一个数据管理系统，核心功能是管理数据库，一个 MySQL 环境下可管理多个数据库。</li><li>遵循 “关系模型”，数据之间可通过 “主键 - 外键” 建立关联,同时支持 ACID 事务特性。</li><li>其核心功能是存储、组织、管理数据：通过 “数据库 - 表 - 行 - 列” 的层级结构（关系模型），将数据结构化存储（例如用 “用户表” 存储用户信息，“订单表” 存储订单数据），并支持高效的查询、修改、删除等操作。</li></ul><h2 id="二、mysql基本指令" tabindex="-1"><a class="header-anchor" href="#二、mysql基本指令"><span>二、MySQL基本指令</span></a></h2><h3 id="一-ddl-数据定义语言" tabindex="-1"><a class="header-anchor" href="#一-ddl-数据定义语言"><span>（一）DDL（数据定义语言）</span></a></h3><table><thead><tr><th>操作目的</th><th>SQL语句</th><th>说明</th></tr></thead><tbody><tr><td>查看所有数据库</td><td><code>show databases;</code></td><td>列出当前 MySQL 环境下的所有数据库</td></tr><tr><td>进入指定数据库</td><td><code>use 数据库名;</code></td><td>切换到目标数据库，后续操作基于该数据库</td></tr><tr><td>查看数据库表</td><td><code>show tables;</code></td><td>列出当前数据库中的所有表</td></tr><tr><td>新建数据库</td><td><code>create database 数据库名;</code></td><td>创建一个新的空数据库</td></tr><tr><td>删除数据表</td><td><code>drop table 表名;</code></td><td>注意：此操作会永久删除表，需谨慎执行</td></tr></tbody></table><h3 id="二-dml-数据操作语言" tabindex="-1"><a class="header-anchor" href="#二-dml-数据操作语言"><span>（二）DML（数据操作语言）</span></a></h3><h4 id="_1-插入数据" tabindex="-1"><a class="header-anchor" href="#_1-插入数据"><span>1. 插入数据</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 1. 指定字段插入（推荐，灵活性高）</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">value</span> <span class="token punctuation">(</span>数据<span class="token number">1</span><span class="token punctuation">,</span>数据<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 2. 插入所有列数据（需按表中列的顺序填写数据）</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">value</span><span class="token punctuation">(</span>数据<span class="token number">1</span><span class="token punctuation">,</span>数据<span class="token number">2</span><span class="token punctuation">,</span>数据<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 3. 批量插入多条数据</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 </span>
<span class="line"><span class="token keyword">value</span> <span class="token punctuation">(</span>数据<span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>数据<span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">(</span>数据<span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>数据<span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">(</span>数据<span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>数据<span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-删除数据" tabindex="-1"><a class="header-anchor" href="#_2-删除数据"><span>2. 删除数据</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 删除指定条件的数据（例：删除 student 表中姓名为“王刚”的记录）</span></span>
<span class="line"><span class="token keyword">delete</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;王刚&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改数据" tabindex="-1"><a class="header-anchor" href="#_3-修改数据"><span>3. 修改数据</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 修改指定条件的数据（例：修改 student 表中姓名为“李白”的记录，将 age 改为 20）</span></span>
<span class="line"><span class="token keyword">update</span> student <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">20</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;李白&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-dql-数据查询语言" tabindex="-1"><a class="header-anchor" href="#三-dql-数据查询语言"><span>（三）DQL（数据查询语言）</span></a></h3><h4 id="_1-基础查询" tabindex="-1"><a class="header-anchor" href="#_1-基础查询"><span>1. 基础查询</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 1. 查询表中所有数据（不推荐在工作环境使用）</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 2. 查询指定列数据（例：查询 student 表的 student_id 和 student_name 列）</span></span>
<span class="line"><span class="token keyword">select</span> student_id<span class="token punctuation">,</span> student_name <span class="token keyword">from</span> student<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：<br> 工作环境中尽量避免使用 <code>*</code> 查询，原因如下：</p><ul><li>数据安全：SELECT <code>*</code> 会无条件返回表中所有列。可能泄露敏感字段（如密码、手机号）；</li><li>IO 消耗：会强制数据库读取表中所有列的数据，对于不必要的列会增加磁盘 IO 负担；</li><li>网络消耗：多余数据传输会占用更多网络带宽。</li><li>索引失效：无法利用 “覆盖索引” 优化，只能执行 “回表查询”，增加查询耗时。</li><li>慢查询：大字段拖慢查询。</li></ul><h4 id="_2-列别名-as-用法" tabindex="-1"><a class="header-anchor" href="#_2-列别名-as-用法"><span>2. 列别名（AS 用法）</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 使用 AS 给列起别名（若别名是关键字，可用着重号 \`\` 包裹）</span></span>
<span class="line"><span class="token keyword">select</span> student_id <span class="token keyword">as</span> <span class="token string">&#39;学生ID&#39;</span><span class="token punctuation">,</span> student_name <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> student<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SQL 关键字是数据库系统预定义的、具有特殊含义的单词，用于表示 SQL 语句的结构或操作。</li><li>着重号是SQL中用于标识标识符的符号，告诉数据库：“包裹的内容是一个自定义名称，而非 SQL 关键字”，避免解析歧义。</li></ul><h4 id="_3-条件查询" tabindex="-1"><a class="header-anchor" href="#_3-条件查询"><span>3. 条件查询</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 单条件查询（例：查询 student 表中姓名为“李四”的学生信息）</span></span>
<span class="line"><span class="token keyword">select</span> student_id<span class="token punctuation">,</span> student_name<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> gender <span class="token keyword">from</span> student </span>
<span class="line"><span class="token keyword">where</span> student_name<span class="token operator">=</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 多条件查询（AND 逻辑：同时满足）</span></span>
<span class="line"><span class="token keyword">select</span> student_id<span class="token punctuation">,</span> student_name<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> gender <span class="token keyword">from</span> student </span>
<span class="line"><span class="token keyword">where</span> student_name<span class="token operator">=</span><span class="token string">&#39;李四&#39;</span> <span class="token operator">and</span> student_id <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 多条件查询（OR 逻辑：满足任一）</span></span>
<span class="line"><span class="token keyword">select</span> student_id<span class="token punctuation">,</span> student_name<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> gender <span class="token keyword">from</span> student </span>
<span class="line"><span class="token keyword">where</span> student_name<span class="token operator">=</span><span class="token string">&#39;李四&#39;</span> <span class="token operator">or</span> gender <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-in-关键字-匹配多个值" tabindex="-1"><a class="header-anchor" href="#_4-in-关键字-匹配多个值"><span>4. IN 关键字（匹配多个值）</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 1. 匹配指定集合中的值（例：查询 student_id 为 1、3、8、10、12 的学生）</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> student_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 2. NOT IN 排除指定集合（例：查询 student_id 不在 1、3、8、10、12 中的学生）</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> student_id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-模糊查询-like-用法" tabindex="-1"><a class="header-anchor" href="#_5-模糊查询-like-用法"><span>5. 模糊查询（LIKE 用法）</span></a></h4><ul><li><code>%</code>：匹配任意长度的字符（包括 0 个）；</li><li><code>_</code>：匹配 exactly 1 个字符。</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 1. 姓名以“张”开头（例：张三、张伟、张小明等）</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> student_name <span class="token operator">LIKE</span> <span class="token string">&#39;张%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 2. 姓名是 3 个字（例：张三丰、李四海等）</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">where</span> student_name <span class="token operator">LIKE</span> <span class="token string">&#39;___&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 3. 姓名是 2 个字且以“张”开头（例：张三、张伟等）</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> student_name <span class="token operator">LIKE</span> <span class="token string">&#39;张_&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 4. 姓名中包含“张”（例：张三、李张三、张四等）</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> student_name <span class="token operator">LIKE</span> <span class="token string">&#39;%张%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 5. 名字中没有“张”字的学生</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> student_name <span class="token operator">NOT</span> <span class="token operator">LIKE</span> <span class="token string">&#39;%张%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若需要匹配的字符串中本身包含 % 或 _（如 “折扣率 80%”“型号 A_123”），直接使用会被当作通配符解析，需用转义符 \\ 声明“这是普通字符，不是通配符”。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 解析：\`\\%\` 表示“普通字符 %”，而非通配符 → 匹配“折扣 80%”“优惠 80%”等</span></span>
<span class="line"><span class="token keyword">SELECT</span> product_name <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> product_desc <span class="token operator">LIKE</span> <span class="token string">&#39;%80\\%&#39;</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h5><ol><li><strong>区分大小写（部分数据库）</strong></li></ol><ul><li>MySQL 默认不区分大小写（如 <code>LIKE &#39;Zhang%&#39;</code> 和 <code>LIKE &#39;zhang%&#39;</code> 效果一致）；</li><li>若需区分大小写，可使用 <code>BINARY</code> 关键字：<div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> student_name <span class="token keyword">FROM</span> student </span>
<span class="line"><span class="token keyword">WHERE</span> <span class="token keyword">BINARY</span> student_name <span class="token operator">LIKE</span> <span class="token string">&#39;Zhang%&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 仅匹配“Zhang”开头（首字母大写）的姓名</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="2"><li><strong>性能影响</strong></li></ol><ul><li>模糊查询（尤其 <code>%</code> 开头，如 <code>&#39;%三&#39;</code>）会导致数据库<strong>无法使用索引</strong>，只能全表扫描，数据量大时查询速度慢；</li><li>优化建议：尽量用“前缀匹配”（如 <code>&#39;三%&#39;</code>），避免“%开头”的匹配；若需频繁模糊查询，可考虑数据库的“全文索引”（如 MySQL 的 <code>FULLTEXT</code> 索引）。</li></ul><ol start="3"><li><strong>中文匹配问题</strong></li></ol><ul><li>确保数据库表的字符集为 <code>utf8mb4</code> 或 <code>gbk</code>（支持中文），否则可能出现匹配失效；</li><li>示例：若字符集为 <code>latin1</code>（不支持中文），<code>LIKE &#39;王%&#39;</code> 可能无法匹配中文“王磊”。</li></ul><h4 id="_6-排序-order-by" tabindex="-1"><a class="header-anchor" href="#_6-排序-order-by"><span>6. 排序（ORDER BY）</span></a></h4><ul><li>升序：<code>ASC</code>（默认，可省略）；</li><li>降序：<code>DESC</code>（需显式指定）。</li><li>排序字段：可以是表中的列名、表达式（如 SUM(score)）或列的别名（如 AS 别名）。</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 1. 单字段排序（例：按 student_id 降序查询）</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> student_id <span class="token keyword">DESC</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 2. 多字段排序（例：先按 student_name 升序，再按 student_id 降序）</span></span>
<span class="line"><span class="token comment">-- 规则：先按第一个字段排序，第一个字段值相同时，再按第二个字段排序，以此类推。</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> student_name <span class="token keyword">ASC</span><span class="token punctuation">,</span> student_id <span class="token keyword">DESC</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 3. 排序字段可以是表达式或函数的计算结果，而非直接使用表中的列。(按 “字符串长度” 排序（使用 LENGTH() 函数）)</span></span>
<span class="line"><span class="token comment">-- 按姓名长度升序排列（短名字在前，长名字在后）</span></span>
<span class="line"><span class="token keyword">SELECT</span> student_name <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> LENGTH<span class="token punctuation">(</span>student_name<span class="token punctuation">)</span> <span class="token keyword">ASC</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1"><span>注意事项</span></a></h5><ul><li>MySQL 中，NULL 被视为 “最小值”，</li><li>字符串排序默认按字符的 ASCII 码值排序（而非实际语义）</li></ul><h4 id="_7-部分查询-limit" tabindex="-1"><a class="header-anchor" href="#_7-部分查询-limit"><span>7. 部分查询（LIMIT）</span></a></h4><table><thead><tr><th>语法格式</th><th>说明</th><th>适用场景</th></tr></thead><tbody><tr><td><code>LIMIT N</code></td><td>返回查询结果的前 <code>N</code> 条数据（从第 1 条开始，索引从 0 计算时对应 <code>0~N-1</code>）</td><td>获取 “Top N” 数据（如前 10 条、前 5 条）</td></tr><tr><td><code>LIMIT offset, N</code></td><td><code>offset</code> 表示 “起始偏移量”（从 0 开始计数，即第 <code>offset+1</code> 条数据），<code>N</code> 表示 “返回的行数”</td><td>分页查询（如第 2 页、第 3 页数据）</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 1. 查询前 3 条数据（起始索引默认 0，可省略）</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">-- 等价于 LIMIT 0, 3</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 2. 查询第 4-7 条数据（起始索引 3，查询 4 条）</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 3. 明确查询前 3 条（显式写起始索引 0，可读性更高）</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>若结果包含 NULL 值，LIMIT 会正常截取</li><li>LIMIT offset, N 中，offset 是 “起始位置的偏移量”，而非 “起始页码”，且从 0 开始计数： <ul><li>offset=0 → 从第 1 条数据开始</li><li>offset=5 → 从第 6 条数据开始</li><li>错误示例：若想查第 1 页（1~5 条），写 LIMIT 1, 5 会从第 2 条开始，导致第 1 条数据丢失，正确写法是 LIMIT 0, 5 或简化为 LIMIT 5。</li></ul></li><li>必须配合 ORDER BY 保证顺序稳定</li></ul><h5 id="深度分页" tabindex="-1"><a class="header-anchor" href="#深度分页"><span>深度分页</span></a></h5><p>通常表现为 LIMIT 子句中 offset 数值很大。</p><p>执行逻辑：</p><ul><li>数据库需要先扫描并排序前 100000 + 10 = 100010 条数据；</li><li>丢弃前 100000 条数据，仅返回最后 10 条；</li><li>随着 offset 增大，扫描和排序的数据量线性增加，磁盘 IO 和内存消耗剧增，查询耗时会大幅上升（可能从毫秒级变为秒级）。</li></ul><p>优化方案：</p><ul><li>基于 “索引有序性” 的定位查询：若表中存在唯一且有序的字段（如自增主键 id、创建时间 create_time 等，需有索引），可通过 “条件过滤” 直接定位到分页起始位置，替代 offset。</li><li>借助 “覆盖索引” 减少数据扫描：若查询只需部分字段，可创建覆盖索引（包含查询所需的所有字段），让数据库无需访问表数据，直接通过索引返回结果，减少 IO 消耗。</li></ul><h4 id="_8-合并查询-union-union-all" tabindex="-1"><a class="header-anchor" href="#_8-合并查询-union-union-all"><span>8. 合并查询（UNION / UNION ALL）</span></a></h4><table><thead><tr><th>关键字</th><th>功能</th><th>效率</th><th>适用场景</th></tr></thead><tbody><tr><td><code>UNION</code></td><td>合并多个查询结果，并<strong>去重</strong>（整体去重）</td><td>较低</td><td>需避免重复结果时</td></tr><tr><td><code>UNION ALL</code></td><td>合并多个查询结果，<strong>不做去重</strong></td><td>较高</td><td>允许重复结果，追求效率</td></tr></tbody></table><p><strong>注意</strong>：合并的结果集<strong>列数必须相同</strong>（列类型可不同）。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 格式1：UNION（去重合并）</span></span>
<span class="line"><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">UNION</span></span>
<span class="line"><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token keyword">FROM</span> 表<span class="token number">2</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 格式2：UNION ALL（保留重复合并）</span></span>
<span class="line"><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">UNION</span> <span class="token keyword">ALL</span></span>
<span class="line"><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token keyword">FROM</span> 表<span class="token number">2</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ul><li>多个 SELECT 语句返回的字段数量必须相同，否则会报错。</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 错误：第一个查询返回2个字段，第二个返回1个字段</span></span>
<span class="line"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> student</span>
<span class="line"><span class="token keyword">UNION</span></span>
<span class="line"><span class="token keyword">SELECT</span> age <span class="token keyword">FROM</span> student<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对应位置的字段类型需兼容（如 int 与 float 兼容，varchar 与 text 兼容），否则可能导致数据转换错误或结果不符合预期。</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 正确：id（int）与 num（int）兼容，name（varchar）与 title（varchar）兼容</span></span>
<span class="line"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> student</span>
<span class="line"><span class="token keyword">UNION</span></span>
<span class="line"><span class="token keyword">SELECT</span> num<span class="token punctuation">,</span> title <span class="token keyword">FROM</span> course<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若需对合并后的结果排序或分页，需将合并查询作为子查询，在外层进行处理（ORDER BY 和 LIMIT 需写在最后）。</li><li>UNION 会对整个结果集进行去重（即所有字段完全相同的行才会被视为重复），而非单字段去重。</li></ul><h5 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h5><ul><li>合并同一表中不同条件的结果</li><li>合并不同表的同类数据</li><li>当查询条件复杂且难以用 OR 合并时，可拆分为多个简单查询再合并。需求：查询 “（年龄 &lt; 18 且成绩&gt; 90）” 或 “（年龄 &gt; 60 且成绩 &lt; 60）” 的学生。</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token operator">AND</span> score <span class="token operator">&gt;</span> <span class="token number">90</span></span>
<span class="line"><span class="token keyword">UNION</span> <span class="token keyword">ALL</span>  <span class="token comment">-- 已知两个条件无重叠，用 UNION ALL 提升性能</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token operator">AND</span> score <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-结果去重-distinct" tabindex="-1"><a class="header-anchor" href="#_9-结果去重-distinct"><span>9. 结果去重（DISTINCT）</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 例：查询 student 表中不重复的姓名（对结果集去重，非对表中字段去重）</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> name <span class="token keyword">FROM</span> student<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四-嵌套查询与关联查询" tabindex="-1"><a class="header-anchor" href="#四-嵌套查询与关联查询"><span>（四）嵌套查询与关联查询</span></a></h3><h4 id="_1-嵌套查询-子查询" tabindex="-1"><a class="header-anchor" href="#_1-嵌套查询-子查询"><span>1. 嵌套查询（子查询）</span></a></h4><p>定义：一个查询语句中嵌套另一个查询（子查询结果作为主查询的条件或数据源）。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 场景1：查询有不及格成绩的学生信息（成绩 &lt; 60 为不及格）</span></span>
<span class="line"><span class="token comment">-- 方式一：多表关联 + DISTINCT 去重</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token punctuation">,</span>score <span class="token keyword">WHERE</span> score<span class="token punctuation">.</span>score <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">and</span> student<span class="token punctuation">.</span>student_id <span class="token operator">=</span> score<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 方式二：IN 子查询（更简洁）</span></span>
<span class="line"><span class="token keyword">SELECT</span> student_name </span>
<span class="line"><span class="token keyword">FROM</span> student </span>
<span class="line"><span class="token keyword">WHERE</span> student_id <span class="token operator">IN</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> student_id </span>
<span class="line">    <span class="token keyword">FROM</span> score </span>
<span class="line">    <span class="token keyword">WHERE</span> score <span class="token operator">&lt;</span> <span class="token number">60</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 场景2：查询总成绩最高的学生 ID（子查询作为临时表）</span></span>
<span class="line"><span class="token comment">-- 注意：子查询作为表时，必须起别名（例：别名 a）</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> </span>
<span class="line"><span class="token keyword">FROM</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">SELECT</span> student_id<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> sumscore </span>
<span class="line">    <span class="token keyword">FROM</span> score </span>
<span class="line">    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> student_id </span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">as</span> a </span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sumscore <span class="token keyword">DESC</span> </span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-关联查询" tabindex="-1"><a class="header-anchor" href="#_2-关联查询"><span>2. 关联查询</span></a></h4><p>定义：当查询结果需要从多张表获取时，通过“关联条件”将表连接（常见：左连接、内连接、全外连接）。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 1. 左连接（LEFT JOIN）</span></span>
<span class="line"><span class="token comment">-- 规则：以左表（student）为主表，显示左表所有数据；右表（score）仅显示匹配关联条件的数据（不匹配则为 NULL）</span></span>
<span class="line"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> sc<span class="token punctuation">.</span><span class="token operator">*</span> </span>
<span class="line"><span class="token keyword">FROM</span> student s </span>
<span class="line"><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> score sc </span>
<span class="line"><span class="token keyword">ON</span> s<span class="token punctuation">.</span>student_id <span class="token operator">=</span> sc<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 执行逻辑：先将 student 表中的每一行都加入到结果集中，然后在 score 表中查找与 student 表当前行 student_id 匹配的行，</span></span>
<span class="line"><span class="token comment">-- 如果找到，就将对应的成绩字段值填入结果集；如果没找到，成绩字段就填入 NULL。</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 2. 内连接（INNER JOIN）</span></span>
<span class="line"><span class="token comment">-- 规则：仅显示两张表中“满足关联条件”的数据（无匹配则不显示）</span></span>
<span class="line"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> sc<span class="token punctuation">.</span><span class="token operator">*</span> </span>
<span class="line"><span class="token keyword">FROM</span> student s </span>
<span class="line"><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> score sc </span>
<span class="line"><span class="token keyword">ON</span> s<span class="token punctuation">.</span>student_id <span class="token operator">=</span> sc<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 执行逻辑：数据库会逐行检查 student 表和 score 表中的记录，</span></span>
<span class="line"><span class="token comment">-- 只有当 student 表中的 student_id 与 score 表中的 student_id 相等时，才会将这两条记录对应的字段组合成一行加入到结果集中。</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 3. 全外连接（FULL JOIN）</span></span>
<span class="line"><span class="token comment">-- 说明：MySQL 不原生支持 FULL JOIN，需借助 UNION 合并左连接和右连接结果</span></span>
<span class="line"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> sc<span class="token punctuation">.</span><span class="token operator">*</span> </span>
<span class="line"><span class="token keyword">FROM</span> student s </span>
<span class="line"><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> score sc </span>
<span class="line"><span class="token keyword">ON</span> s<span class="token punctuation">.</span>student_id <span class="token operator">=</span> sc<span class="token punctuation">.</span>student_id</span>
<span class="line"><span class="token keyword">UNION</span></span>
<span class="line"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> sc<span class="token punctuation">.</span><span class="token operator">*</span> </span>
<span class="line"><span class="token keyword">FROM</span> student s </span>
<span class="line"><span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> score sc </span>
<span class="line"><span class="token keyword">ON</span> s<span class="token punctuation">.</span>student_id <span class="token operator">=</span> sc<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 执行逻辑：先获取左连接的结果，再获取右连接的结果，最后通过 UNION 合并，去除重复行（如果使用 UNION ALL 则保留重复行）。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>s.* 表示获取别名为 s 的表中的所有字段。</p><p><strong>注意事项</strong>：</p><ul><li>SQL 中判断 NULL 值不能用 <code>=</code>，需用 <code>IS NULL</code>（判断空）或 <code>IS NOT NULL</code>（判断非空）。</li><li>关联条件应选择能准确反映表之间关系的字段，通常是主键 - 外键关系，否则可能导致结果错误或出现大量冗余数据。</li><li>在关联条件字段上创建索引可以大大提高关联查询的性能。</li><li>当涉及三个或更多表的关联查询时，需要合理安排表的连接顺序和关联条件。可以先确定主表，再逐步连接其他相关表，确保逻辑清晰，避免出现数据遗漏或错误。</li></ul><h2 id="三、数据库常用数据类型" tabindex="-1"><a class="header-anchor" href="#三、数据库常用数据类型"><span>三、数据库常用数据类型</span></a></h2><h3 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型"><span>数值类型</span></a></h3><table><thead><tr><th>类型分类</th><th>具体类型</th><th>字节数</th><th>取值范围（有符号）</th><th>取值范围（无符号 UNSIGNED）</th><th>核心用途</th></tr></thead><tbody><tr><td>整数类型</td><td><code>TINYINT</code></td><td>1</td><td><code>-128 ~ 127</code></td><td><code>0 ~ 255</code></td><td>存储状态（如 0=禁用、1=启用）、性别（0=女、1=男）等微小型整数</td></tr><tr><td></td><td><code>SMALLINT</code></td><td>2</td><td><code>-32768 ~ 32767</code></td><td><code>0 ~ 65535</code></td><td>存储年龄（0-120）、少量数据的 ID（如分类 ID）</td></tr><tr><td></td><td><code>MEDIUMINT</code></td><td>3</td><td><code>-8388608 ~ 8388607</code></td><td><code>0 ~ 16777215</code></td><td>存储中等规模的 ID（如百万级数据的用户 ID）</td></tr><tr><td></td><td><code>INT</code></td><td>4</td><td><code>-2147483648 ~ 2147483647</code></td><td><code>0 ~ 4294967295</code></td><td>最常用，存储常规 ID（如订单 ID、用户 ID）、数量（如商品库存）</td></tr><tr><td></td><td><code>BIGINT</code></td><td>8</td><td><code>-9223372036854775808 ~ 9223372036854775807</code></td><td><code>0 ~ 18446744073709551615</code></td><td>存储超大 ID（如分布式系统的全局 ID）、超大规模数据的计数</td></tr><tr><td>浮点数/定点数</td><td><code>FLOAT</code></td><td>4</td><td>单精度，约 7 位小数精度</td><td>-</td><td>非精确计算场景（如科学数据、温度、湿度）</td></tr><tr><td></td><td><code>DOUBLE</code></td><td>8</td><td>双精度，约 15 位小数精度</td><td>-</td><td>较高精度的非精确计算（如身高、体重）</td></tr><tr><td></td><td><code>DECIMAL(M,D)</code></td><td>M+2</td><td>M=总位数（默认 10），D=小数位（默认 0）</td><td>-</td><td>精确计算场景（如金额、税率、价格，例 <code>DECIMAL(10,2)</code> 表示 0.00~9999999.99）</td></tr></tbody></table><h3 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型"><span>字符串类型</span></a></h3><table><thead><tr><th>类型分类</th><th>具体类型</th><th>长度限制</th><th>核心特点</th><th>核心用途</th></tr></thead><tbody><tr><td>短字符串</td><td><code>CHAR(M)</code></td><td>M=1~255（固定长度）</td><td>存储时长度固定，不足补空格；查询效率高</td><td>固定长度的短文本（如手机号 <code>CHAR(11)</code>、身份证号 <code>CHAR(18)</code>、性别标识）</td></tr><tr><td></td><td><code>VARCHAR(M)</code></td><td>M=1~65535（可变长度）</td><td>存储时按实际内容长度分配空间，节省存储</td><td>长度不固定的短文本（如姓名 <code>VARCHAR(50)</code>、地址 <code>VARCHAR(255)</code>、邮箱）</td></tr><tr><td>长字符串</td><td><code>TEXT</code></td><td>0~65535 字节（约 64KB）</td><td>普通长文本存储</td><td>短文、评论、商品简介</td></tr><tr><td></td><td><code>MEDIUMTEXT</code></td><td>0~16777215 字节（约 16MB）</td><td>中等长度长文本存储</td><td>文章内容、日志记录</td></tr><tr><td></td><td><code>LONGTEXT</code></td><td>0~4294967295 字节（约 4GB）</td><td>超长文本存储</td><td>大型文档、视频字幕、海量日志</td></tr><tr><td>二进制字符串</td><td><code>BLOB</code></td><td>0~65535 字节（约 64KB）</td><td>存储二进制数据（如小图片、图标）</td><td>小型二进制文件（实际开发中更推荐存储文件路径，而非二进制本身）</td></tr><tr><td></td><td><code>MEDIUMBLOB</code></td><td>0~16777215 字节（约 16MB）</td><td>存储中等二进制数据</td><td>中等大小二进制文件（如压缩包、中等图片）</td></tr><tr><td></td><td><code>LONGBLOB</code></td><td>0~4294967295 字节（约 4GB）</td><td>存储超大二进制数据</td><td>大型二进制文件（如视频片段、高清图片）</td></tr></tbody></table><h3 id="日期与时间类型" tabindex="-1"><a class="header-anchor" href="#日期与时间类型"><span>日期与时间类型</span></a></h3><table><thead><tr><th>类型分类</th><th>具体类型</th><th>字节数</th><th>格式</th><th>取值范围</th><th>核心特点</th><th>核心用途</th></tr></thead><tbody><tr><td>日期时间类型</td><td><code>DATE</code></td><td>3</td><td><code>YYYY-MM-DD</code></td><td><code>1000-01-01 ~ 9999-12-31</code></td><td>仅存储日期（年-月-日）</td><td>存储生日、订单日期、活动开始日期</td></tr><tr><td></td><td><code>TIME</code></td><td>3</td><td><code>HH:MM:SS</code></td><td><code>-838:59:59 ~ 838:59:59</code></td><td>仅存储时间（时-分-秒），支持负数（时间差）</td><td>存储时长、打卡时间（如 <code>09:30:00</code>）、时间间隔</td></tr><tr><td></td><td><code>DATETIME</code></td><td>8</td><td><code>YYYY-MM-DD HH:MM:SS</code></td><td><code>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</code></td><td>存储日期+时间，不受时区影响</td><td>存储订单创建时间、用户注册时间、事件发生时间（需精确且固定）</td></tr><tr><td></td><td><code>TIMESTAMP</code></td><td>4</td><td><code>YYYY-MM-DD HH:MM:SS</code></td><td><code>1970-01-01 00:00:01 ~ 2038-01-19 03:14:07</code></td><td>存储日期+时间，受时区影响；支持自动更新</td><td>存储最后修改时间（如 <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code>）</td></tr><tr><td></td><td><code>YEAR</code></td><td>1</td><td><code>YYYY</code></td><td><code>1901 ~ 2155</code></td><td>仅存储年份，节省空间</td><td>存储出生年份、产品生产年份</td></tr></tbody></table><h3 id="特殊类型" tabindex="-1"><a class="header-anchor" href="#特殊类型"><span>特殊类型</span></a></h3><table><thead><tr><th>类型分类</th><th>具体类型</th><th>长度限制</th><th>核心特点</th><th>核心用途</th></tr></thead><tbody><tr><td>枚举/集合类型</td><td><code>ENUM</code></td><td>1~2 字节（取决于选项数）</td><td>仅能从预定义选项中选择<strong>一个值</strong>；存储为数字索引</td><td>存储固定选项的单值（如性别 <code>ENUM(&#39;男&#39;,&#39;女&#39;)</code>、订单状态 <code>ENUM(&#39;待支付&#39;,&#39;已完成&#39;)</code>）</td></tr><tr><td></td><td><code>SET</code></td><td>1~8 字节（取决于选项数）</td><td>可从预定义选项中选择<strong>多个值</strong>（最多 64 个）</td><td>存储固定选项的多值（如兴趣爱好 <code>SET(&#39;阅读&#39;,&#39;运动&#39;,&#39;音乐&#39;)</code>、用户权限 <code>SET(&#39;查询&#39;,&#39;编辑&#39;,&#39;删除&#39;)</code>）</td></tr></tbody></table><p><strong>注意事项</strong>：数据库优化之一是“选择合适的数据类型”，例如：</p><ul><li>存储性别用 <code>tinyint</code>（0=女，1=男）而非 <code>varchar</code>；</li><li>存储金额用 <code>decimal</code> 而非 <code>double</code>，避免精度丢失。</li></ul><h2 id="四、事务管理" tabindex="-1"><a class="header-anchor" href="#四、事务管理"><span>四、事务管理</span></a></h2><h3 id="一-事务基本操作" tabindex="-1"><a class="header-anchor" href="#一-事务基本操作"><span>（一）事务基本操作</span></a></h3><p>事务是“不可分割的工作单位”，操作要么全执行，要么全回滚。MySQL 中事务需依赖 <code>InnoDB</code> 存储引擎（<code>MyISAM</code> 不支持事务）。</p><table><thead><tr><th>操作指令</th><th>功能说明</th></tr></thead><tbody><tr><td><code>start transaction</code></td><td>开启事务（后续 DML 操作不会自动提交）</td></tr><tr><td><code>savepoint 保存点名</code></td><td>设置事务保存点（用于回滚到指定步骤，而非全量回滚）</td></tr><tr><td><code>rollback to 保存点名</code></td><td>回滚事务到指定保存点（保存点之后的操作会撤销）</td></tr><tr><td><code>rollback</code></td><td>全量回滚事务（撤销所有未提交的操作）</td></tr><tr><td><code>commit</code></td><td>提交事务（所有操作永久生效，无法回滚；提交后自动删除所有保存点）</td></tr><tr><td><code>release savepoint 保存点名称</code></td><td>删除保存点（移除已创建的保存点，释放资源）</td></tr></tbody></table><h5 id="savepoint-保存点" tabindex="-1"><a class="header-anchor" href="#savepoint-保存点"><span>savepoint（保存点）:</span></a></h5><p>SAVEPOINT 通过自定义的名称设置一个存储点，如果当前事务已经有了一个同名的 SAVEPOINT ，那么旧的将会被替代。</p><p>ROLLBACK TO SAVEPOINT 子句可以将当前事务回退到自定义的存储点位置，而不会结束事务， InnoDB 不会释放内存中的行锁（对于新插入的行，其锁信息通过行数据中自带的 “事务 ID” 标识，而不会单独存储在内存中，当回滚到保存点时，这些新插入的行会被直接删除，其携带的锁信息自然消失（相当于释放锁）。）， 存储点之后语句都会撤销执行，包括新设置的存储点，也同样会被删除。</p><p>RELEASE SAVEPOINT 子句，会从当前的事务 SAVEPOINT 集合中，移除指定名称的 SAVEPOINT 。.</p><h5 id="回退事务" tabindex="-1"><a class="header-anchor" href="#回退事务"><span>回退事务</span></a></h5><p>当执行回退事务时，通过指定保存点可以回退到指定的点。</p><h5 id="提交事务" tabindex="-1"><a class="header-anchor" href="#提交事务"><span>提交事务</span></a></h5><p>使用comit语句可以提交事务，当执行了commit语句后，会确认事务的变化、结束事务、删除保存点、释放锁，数据生效。当使用commit语句结束事务之后， 其他会话将可以查看到事务变化后的新数据。</p><blockquote><p>如果不开始事务，默认情况下，DML操作是自动提交的，不能回滚。mysql 的事务需要存储引擎为innodb ，而myisam 不支持。</p></blockquote><h4 id="示例-事务操作流程" tabindex="-1"><a class="header-anchor" href="#示例-事务操作流程"><span>示例：事务操作流程</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 1. 创建测试表</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">TEXT</span><span class="token punctuation">(</span></span>
<span class="line">  id <span class="token keyword">int</span><span class="token punctuation">,</span></span>
<span class="line">  name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 2. 开启事务</span></span>
<span class="line"><span class="token keyword">start</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 3. 设置保存点 a</span></span>
<span class="line"><span class="token keyword">SAVEPOINT</span> a<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 4. 执行 DML 操作（插入第一条数据）</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">TEXT</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 5. 设置保存点 b</span></span>
<span class="line"><span class="token keyword">SAVEPOINT</span> b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 6. 执行 DML 操作（插入第二条数据）</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">TEXT</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 7. 查看当前数据（此时数据未提交，仅当前会话可见）</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">TEXT</span><span class="token punctuation">;</span>  <span class="token comment">-- 结果：两条数据</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 8. 回滚到保存点 b（撤销“插入 200,&#39;jack&#39;”的操作）</span></span>
<span class="line"><span class="token keyword">rollback</span> <span class="token keyword">to</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">TEXT</span><span class="token punctuation">;</span>  <span class="token comment">-- 结果：仅 100,&#39;tom&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 9. 回滚到保存点 a（撤销“插入 100,&#39;tom&#39;”的操作）</span></span>
<span class="line"><span class="token keyword">rollback</span> <span class="token keyword">to</span> a<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">TEXT</span><span class="token punctuation">;</span>  <span class="token comment">-- 结果：空表</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 10. （可选）提交事务（若执行 commit，后续无法回滚）</span></span>
<span class="line"><span class="token comment">-- commit;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-事务隔离级别" tabindex="-1"><a class="header-anchor" href="#二-事务隔离级别"><span>（二）事务隔离级别</span></a></h3><h4 id="_1-隔离级别作用" tabindex="-1"><a class="header-anchor" href="#_1-隔离级别作用"><span>1. 隔离级别作用</span></a></h4><p>多个事务并发访问时，隔离级别用于控制“事务间数据可见性”，避免脏读、不可重复读、幻读等问题。</p><h4 id="_2-三类常见问题" tabindex="-1"><a class="header-anchor" href="#_2-三类常见问题"><span>2. 三类常见问题</span></a></h4><table><thead><tr><th>问题类型</th><th>定义</th></tr></thead><tbody><tr><td>脏读（Dirty Read）</td><td>事务 A 读取了事务 B 尚未提交的修改（若 B 回滚，A 读取的是“无效数据”）</td></tr><tr><td>不可重复读（Non-repeatable Read）</td><td>事务 A 同一查询多次执行，因事务 B 提交修改/删除，导致每次结果不同</td></tr><tr><td>幻读（Phantom Read）</td><td>事务 A 同一查询多次执行，因事务 B 提交插入，导致每次结果行数不同</td></tr></tbody></table><h4 id="_3-隔离级别操作指令" tabindex="-1"><a class="header-anchor" href="#_3-隔离级别操作指令"><span>3. 隔离级别操作指令</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 1. 查看当前会话隔离级别</span></span>
<span class="line"><span class="token keyword">select</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 2. 查看系统全局隔离级别</span></span>
<span class="line"><span class="token keyword">select</span> @<span class="token variable">@global.transaction_isolation</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 3. 设置当前会话隔离级别（例：设置为“读未提交”）</span></span>
<span class="line"><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 4. 设置系统全局隔离级别（例：设置为“读未提交”）</span></span>
<span class="line"><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-种隔离级别名称及含义" tabindex="-1"><a class="header-anchor" href="#_4-4-种隔离级别名称及含义"><span>4. 4 种隔离级别名称及含义</span></a></h4><p>MySQL 支持 SQL 标准定义的 4 种隔离级别，按隔离程度从低到高排序：</p><table><thead><tr><th>隔离级别名称</th><th>含义</th><th>解决的问题</th></tr></thead><tbody><tr><td><code>READ UNCOMMITTED</code>（读未提交）</td><td>事务可以读取其他事务未提交的修改（脏读）</td><td>无</td></tr><tr><td><code>READ COMMITTED</code>（读已提交）</td><td>事务只能读取其他事务已提交的修改，避免脏读</td><td>脏读</td></tr><tr><td><code>REPEATABLE READ</code>（可重复读）</td><td>事务中多次读取同一数据的结果一致，避免不可重复读（MySQL 默认级别）</td><td>脏读、不可重复读</td></tr><tr><td><code>SERIALIZABLE</code>（可序列化）</td><td>最高隔离级别，事务串行执行，避免幻读</td><td>脏读、不可重复读、幻读</td></tr></tbody></table><h3 id="三-事务-acid-特性" tabindex="-1"><a class="header-anchor" href="#三-事务-acid-特性"><span>（三）事务 ACID 特性</span></a></h3><p>事务必须满足以下 4 个特性，确保数据一致性和可靠性：</p><ol><li><strong>原子性（Atomicity）</strong>：事务是一个 “不可分割的最小操作单元”，操作“要么全成，要么全败”；undo log（回滚日志） 保证</li><li><strong>一致性（Consistency）</strong>：事务执行前后，数据库从“一个一致性状态”切换到“另一个一致性状态”（例：转账前 A 有 100 元、B 有 50 元，转账后 A 50 元、B 100 元，总金额不变）；依赖其他三大特性保证</li><li><strong>隔离性（Isolation）</strong>：多个并发事务互不干扰，每个事务看到的数据是“独立的”；依赖 锁机制 和 MVCC（多版本并发控制） 实现</li><li><strong>持久性（Durability）</strong>：事务提交后，对数据的修改是永久性的（即使数据库崩溃，数据也不会丢失）。依赖 redo log（重做日志） 实现</li></ol><h2 id="五、数据库面试常见问题" tabindex="-1"><a class="header-anchor" href="#五、数据库面试常见问题"><span>五、数据库面试常见问题</span></a></h2><h3 id="_1-mb3-和-mb4-有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-mb3-和-mb4-有什么区别"><span>1. mb3 和 mb4 有什么区别？</span></a></h3><ul><li>核心差异：<code>mb</code> 中 <code>m</code> 表示 <code>max</code>（最大），<code>b</code> 表示 <code>byte</code>（字节），即 <code>mb3</code> 一个字符最多占 3 字节，<code>mb4</code> 最多占 4 字节；</li><li>功能差异：<code>mb4</code> 比 <code>mb3</code> 多 1 字节，可支持表情符号（如 😊），而 <code>mb3</code> 仅支持常规字符（英文 1 字节、阿拉伯语 2 字节、东亚语言 3 字节）。</li></ul><h3 id="_2-数据库连接命令是什么" tabindex="-1"><a class="header-anchor" href="#_2-数据库连接命令是什么"><span>2. 数据库连接命令是什么？</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">mysql <span class="token parameter variable">-h</span> 主机名 <span class="token parameter variable">-P</span> 端口号 <span class="token parameter variable">-u</span> 用户名 <span class="token parameter variable">-p</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>参数说明： <ul><li><code>-h</code>：指定 MySQL 服务器的地址（IP 或域名）。</li><li><code>-u</code>：指定用户名（例：<code>root</code> 是 MySQL 超级用户）；</li><li><code>-p</code>：提示输入密码（输入命令后按回车，再输入密码即可登录）。</li></ul></li></ul><h3 id="_3-varchar-和-char-的区别" tabindex="-1"><a class="header-anchor" href="#_3-varchar-和-char-的区别"><span>3. varchar 和 char 的区别？</span></a></h3><table><thead><tr><th>对比维度</th><th>VARCHAR</th><th>CHAR</th></tr></thead><tbody><tr><td><strong>存储方式</strong></td><td>可变长度，按实际数据长度存储</td><td>固定长度，不足时用空格填充至指定长度</td></tr><tr><td><strong>长度限制</strong></td><td>0-65535 字节（实际受行总长度限制）</td><td>0-255 字节</td></tr><tr><td><strong>存储空间</strong></td><td>额外占用 1-2 字节存储长度信息（记录实际长度）</td><td>不额外占用空间，直接使用指定长度的空间</td></tr><tr><td><strong>查询效率</strong></td><td>较低（需计算实际长度）</td><td>较高（直接按固定长度读取）</td></tr><tr><td><strong>尾部空格处理</strong></td><td>存储时会自动截断尾部空格</td><td>存储时保留尾部空格，查询时会自动截断</td></tr><tr><td><strong>适用场景</strong></td><td>长度不固定的字符串（如姓名、地址、描述）</td><td>长度固定的字符串（如手机号、身份证号、性别）</td></tr><tr><td><strong>示例</strong></td><td><code>VARCHAR(50)</code> 存储 &quot;张三&quot; 占用 3 字节（含长度标识）</td><td><code>CHAR(50)</code> 存储 &quot;张三&quot; 占用 50 字节（补 48 个空格）</td></tr></tbody></table><ul><li>VARCHAR 更节省空间，适合存储长度差异较大的数据；CHAR 因长度固定，查询效率更高，但可能浪费空间。</li><li>尾部空格处理是重要区别：VARCHAR 会自动去除插入时的尾部空格，而 CHAR 会保留空格但查询时自动截断（可能导致匹配问题）。</li><li>选择时需平衡空间利用率和查询性能，根据数据长度是否固定来决定。</li></ul>`,125)]))}const o=n(l,[["render",p]]),i=JSON.parse('{"path":"/blogs/backend/mysql.html","title":"MYSQL学习","lang":"en-US","frontmatter":{"title":"MYSQL学习","date":"2025/8/11","tags":["MYSQL"],"categories":["后端学习"]},"headers":[{"level":2,"title":"一、MySQL是什么","slug":"一、mysql是什么","link":"#一、mysql是什么","children":[]},{"level":2,"title":"二、MySQL基本指令","slug":"二、mysql基本指令","link":"#二、mysql基本指令","children":[{"level":3,"title":"（一）DDL（数据定义语言）","slug":"一-ddl-数据定义语言","link":"#一-ddl-数据定义语言","children":[]},{"level":3,"title":"（二）DML（数据操作语言）","slug":"二-dml-数据操作语言","link":"#二-dml-数据操作语言","children":[]},{"level":3,"title":"（三）DQL（数据查询语言）","slug":"三-dql-数据查询语言","link":"#三-dql-数据查询语言","children":[]},{"level":3,"title":"（四）嵌套查询与关联查询","slug":"四-嵌套查询与关联查询","link":"#四-嵌套查询与关联查询","children":[]}]},{"level":2,"title":"三、数据库常用数据类型","slug":"三、数据库常用数据类型","link":"#三、数据库常用数据类型","children":[{"level":3,"title":"数值类型","slug":"数值类型","link":"#数值类型","children":[]},{"level":3,"title":"字符串类型","slug":"字符串类型","link":"#字符串类型","children":[]},{"level":3,"title":"日期与时间类型","slug":"日期与时间类型","link":"#日期与时间类型","children":[]},{"level":3,"title":"特殊类型","slug":"特殊类型","link":"#特殊类型","children":[]}]},{"level":2,"title":"四、事务管理","slug":"四、事务管理","link":"#四、事务管理","children":[{"level":3,"title":"（一）事务基本操作","slug":"一-事务基本操作","link":"#一-事务基本操作","children":[]},{"level":3,"title":"（二）事务隔离级别","slug":"二-事务隔离级别","link":"#二-事务隔离级别","children":[]},{"level":3,"title":"（三）事务 ACID 特性","slug":"三-事务-acid-特性","link":"#三-事务-acid-特性","children":[]}]},{"level":2,"title":"五、数据库面试常见问题","slug":"五、数据库面试常见问题","link":"#五、数据库面试常见问题","children":[{"level":3,"title":"1. mb3 和 mb4 有什么区别？","slug":"_1-mb3-和-mb4-有什么区别","link":"#_1-mb3-和-mb4-有什么区别","children":[]},{"level":3,"title":"2. 数据库连接命令是什么？","slug":"_2-数据库连接命令是什么","link":"#_2-数据库连接命令是什么","children":[]},{"level":3,"title":"3. varchar 和 char 的区别？","slug":"_3-varchar-和-char-的区别","link":"#_3-varchar-和-char-的区别","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/backend/mysql.md"}');export{o as comp,i as data};
